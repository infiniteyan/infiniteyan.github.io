{"title":"Algorithm-Problem-删点成林","date":"2020-03-18T10:35:35.000Z","slug":"Algorithm-Problem-删点成林","comments":true,"updated":"2020-03-18T10:37:01.390Z","content":"<h3 id=\"问题描述\">问题描述<a href=\"post/Algorithm-Problem-删点成林#问题描述\"></a></h3><p>给出二叉树的根节点 root，树上每个节点都有一个不同的值。<br>如果节点值在 to_delete 中出现，我们就把该节点从树上删去，最后得到一个森林（一些不相交的树构成的集合）。<br>返回森林中的每棵树。你可以按任意顺序组织答案。</p>\n<h3 id=\"解决思路\">解决思路<a href=\"post/Algorithm-Problem-删点成林#解决思路\"></a></h3><p>后序遍历</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">type TreeNode <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tVal \t\t<span class=\"keyword\">int</span></span><br><span class=\"line\">\tLeft \t\t*TreeNode</span><br><span class=\"line\">\tRight \t\t*TreeNode</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">func <span class=\"title\">exist</span><span class=\"params\">(slice []<span class=\"keyword\">int</span>, e <span class=\"keyword\">int</span>)</span> <span class=\"keyword\">bool</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; len(slice); i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> slice[i] == e &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func dfs(root *TreeNode, <span class=\"keyword\">delete</span> []<span class=\"keyword\">int</span>, ret *[]*TreeNode) *TreeNode &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> root == nil &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nil</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar left *TreeNode = nil</span><br><span class=\"line\">\tvar right *TreeNode = nil</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> root.Left != nil &#123;</span><br><span class=\"line\">\t\tleft = dfs(root.Left, <span class=\"keyword\">delete</span>, ret)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> root.Right != nil &#123;</span><br><span class=\"line\">\t\tright = dfs(root.Right, <span class=\"keyword\">delete</span>, ret)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> exist(<span class=\"keyword\">delete</span>, root.Val) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> left != nil &#123;</span><br><span class=\"line\">\t\t\t*ret = append(*ret, left)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> right != nil &#123;</span><br><span class=\"line\">\t\t\t*ret = append(*ret, right)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nil</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\troot.Left = left</span><br><span class=\"line\">\t\troot.Right = right</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> root</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func delNodes(root *TreeNode, to_delete []<span class=\"keyword\">int</span>) []*TreeNode &#123;</span><br><span class=\"line\">\tvar ret = []*TreeNode&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> root == nil &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret = append(ret, root)</span><br><span class=\"line\">\tdfs(root, to_delete, &amp;ret)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tone := TreeNode&#123;Val:<span class=\"number\">1</span>, Left:nil, Right:nil&#125;</span><br><span class=\"line\">\ttwo := TreeNode&#123;Val:<span class=\"number\">2</span>, Left:nil, Right:nil&#125;</span><br><span class=\"line\">\tthree := TreeNode&#123;Val:<span class=\"number\">3</span>, Left:nil, Right:nil&#125;</span><br><span class=\"line\">\tfour := TreeNode&#123;Val:<span class=\"number\">4</span>, Left:nil, Right:nil&#125;</span><br><span class=\"line\">\tfive := TreeNode&#123;Val:<span class=\"number\">5</span>, Left:nil, Right:nil&#125;</span><br><span class=\"line\">\tsix := TreeNode&#123;Val:<span class=\"number\">6</span>, Left:nil, Right:nil&#125;</span><br><span class=\"line\">\tseven := TreeNode&#123;Val:<span class=\"number\">7</span>, Left:nil, Right:nil&#125;</span><br><span class=\"line\">\ttwo.Left = &amp;four</span><br><span class=\"line\">\ttwo.Right = &amp;five</span><br><span class=\"line\">\tthree.Left = &amp;six</span><br><span class=\"line\">\tthree.Right = &amp;seven</span><br><span class=\"line\">\tone.Left = &amp;two</span><br><span class=\"line\">\tone.Right = &amp;three</span><br><span class=\"line\"></span><br><span class=\"line\">\tto_delete := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">5</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tallTrees := delNodes(&amp;one, to_delete)</span><br><span class=\"line\">\tfmt.Println(len(allTrees))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Algorithm-Problem-迷你语法分析器","slug":"Algorithm-Problem-迷你语法分析器"},"next":{"title":"Algorithm-Problem-旋转有序数组的查找","slug":"Algorithm-Problem-旋转有序数组的查找"},"link":"http://yoursite.com/post/Algorithm-Problem-删点成林/"}