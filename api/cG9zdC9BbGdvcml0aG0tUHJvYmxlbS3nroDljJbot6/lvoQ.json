{"title":"Algorithm-Problem-简化路径","date":"2020-03-19T07:00:48.000Z","slug":"Algorithm-Problem-简化路径","comments":true,"updated":"2020-03-19T07:03:16.156Z","content":"<h3 id=\"问题描述\">问题描述<a href=\"post/Algorithm-Problem-简化路径#问题描述\"></a></h3><p>以 Unix 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。<br>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：Linux / Unix中的绝对路径 vs 相对路径<br>请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。此外，规范路径必须是表示绝对路径的最短字符串。</p>\n<h4 id=\"示例-1：\">示例 1：<a href=\"post/Algorithm-Problem-简化路径#示例-1：\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;/home/&quot;</span><br><span class=\"line\">输出：&quot;/home&quot;</span><br><span class=\"line\">解释：注意，最后一个目录名后面没有斜杠。</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-2：\">示例 2：<a href=\"post/Algorithm-Problem-简化路径#示例-2：\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;/../&quot;</span><br><span class=\"line\">输出：&quot;/&quot;</span><br><span class=\"line\">解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-3：\">示例 3：<a href=\"post/Algorithm-Problem-简化路径#示例-3：\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;/home//foo/&quot;</span><br><span class=\"line\">输出：&quot;/home/foo&quot;</span><br><span class=\"line\">解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-4：\">示例 4：<a href=\"post/Algorithm-Problem-简化路径#示例-4：\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;/a/./b/../../c/&quot;</span><br><span class=\"line\">输出：&quot;/c&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-5：\">示例 5：<a href=\"post/Algorithm-Problem-简化路径#示例-5：\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;/a/../../b/../c//.//&quot;</span><br><span class=\"line\">输出：&quot;/c&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例-6：\">示例 6：<a href=\"post/Algorithm-Problem-简化路径#示例-6：\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：&quot;/a//b////c/d//././/..&quot;</span><br><span class=\"line\">输出：&quot;/a/b/c&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">func <span class=\"title\">isDoubleDot</span><span class=\"params\">(<span class=\"built_in\">list</span> *<span class=\"built_in\">list</span>.List)</span> <span class=\"keyword\">bool</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">list</span>.Len() &lt; <span class=\"number\">2</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">list</span>.Back().Value.(<span class=\"built_in\">string</span>) == <span class=\"string\">\".\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.Remove(<span class=\"built_in\">list</span>.Back())</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">list</span>.Back().Value.(<span class=\"built_in\">string</span>) == <span class=\"string\">\".\"</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">list</span>.PushBack(<span class=\"string\">\".\"</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">list</span>.PushBack(<span class=\"string\">\".\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func simplifyPath(path <span class=\"built_in\">string</span>) <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">\tlength := len(path)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> length == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">stack</span> := <span class=\"built_in\">list</span>.New()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; length; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">if</span> <span class=\"title\">string</span><span class=\"params\">(path[i])</span> </span>== <span class=\"string\">\"/\"</span> &amp;&amp; <span class=\"built_in\">stack</span>.Len() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">stack</span>.Back().Value.(<span class=\"built_in\">string</span>) == <span class=\"string\">\"/\"</span> &#123; <span class=\"comment\">//遇到连续的/则丢弃一个</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">stack</span>.Back().Value.(<span class=\"built_in\">string</span>) == <span class=\"string\">\".\"</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> isDoubleDot(<span class=\"built_in\">stack</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span> <span class=\"built_in\">stack</span>.Len() != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">stack</span>.Back().Value.(<span class=\"built_in\">string</span>) != <span class=\"string\">\"/\"</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">stack</span>.Len() == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">stack</span>.PushBack(<span class=\"built_in\">string</span>(path[i]))</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">stack</span>.PushBack(<span class=\"built_in\">string</span>(path[i]))</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">stack</span>.PushBack(<span class=\"built_in\">string</span>(path[i]))</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">stack</span>.PushBack(<span class=\"built_in\">string</span>(path[i]))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">stack</span>.Back().Value.(<span class=\"built_in\">string</span>) == <span class=\"string\">\"/\"</span> &amp;&amp; <span class=\"built_in\">stack</span>.Len() &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">stack</span>.Back().Value.(<span class=\"built_in\">string</span>) == <span class=\"string\">\".\"</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> isDoubleDot(<span class=\"built_in\">stack</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> <span class=\"built_in\">stack</span>.Len() != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">stack</span>.Back().Value.(<span class=\"built_in\">string</span>) != <span class=\"string\">\"/\"</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">stack</span>.Len() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">stack</span>.Len() &gt; <span class=\"number\">1</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar result <span class=\"built_in\">string</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> <span class=\"built_in\">stack</span>.Len() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tresult += <span class=\"built_in\">stack</span>.Front().Value.(<span class=\"built_in\">string</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Front())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> len(result) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tresult = <span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\ts := <span class=\"string\">\"/a//b////c/d//././/..\"</span></span><br><span class=\"line\">\tfmt.Println(simplifyPath(s))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","next":{"title":"Algorithm-Problem-迷你语法分析器","slug":"Algorithm-Problem-迷你语法分析器"},"link":"http://yoursite.com/post/Algorithm-Problem-简化路径/"}