{"title":"golang高并发实例","date":"2019-11-07T03:56:00.000Z","slug":"golang高并发实例","comments":true,"updated":"2019-11-07T03:58:46.825Z","content":"<p>main.go<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">    &quot;runtime&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Score struct &#123;</span><br><span class=\"line\">    Num int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (s *Score) Do() &#123;</span><br><span class=\"line\">    fmt.Println(&quot;num:&quot;, s.Num)</span><br><span class=\"line\">    time.Sleep(1 * 1 * time.Second)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    num := 100 * 100 * 20</span><br><span class=\"line\">    p := NewWorkerPool(num)</span><br><span class=\"line\">    p.Run()</span><br><span class=\"line\">    datanum := 100 * 100 * 100 * 100</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        for i := 1; i &lt;= datanum; i++ &#123;</span><br><span class=\"line\">            sc := &amp;Score&#123;Num: i&#125;</span><br><span class=\"line\">            p.JobQueue &lt;- sc</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    for &#123;</span><br><span class=\"line\">        fmt.Println(&quot;runtime.NumGoroutine() :&quot;, runtime.NumGoroutine())</span><br><span class=\"line\">        time.Sleep(2 * time.Second)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>job.go<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">type Job interface &#123;</span><br><span class=\"line\">    Do()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>worker.go<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">type Worker struct &#123;</span><br><span class=\"line\">    JobQueue chan Job</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewWorker() Worker &#123;</span><br><span class=\"line\">    return Worker&#123;JobQueue: make(chan Job)&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func (w Worker) Run(wq chan chan Job) &#123;</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        for &#123;</span><br><span class=\"line\">            wq &lt;- w.JobQueue</span><br><span class=\"line\">            select &#123;</span><br><span class=\"line\">            case job := &lt;-w.JobQueue:</span><br><span class=\"line\">                job.Do()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>workerpool.go<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">type WorkerPool struct &#123;</span><br><span class=\"line\">    workerlen   int</span><br><span class=\"line\">    JobQueue    chan Job</span><br><span class=\"line\">    WorkerQueue chan chan Job</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewWorkerPool(workerlen int) *WorkerPool &#123;</span><br><span class=\"line\">    return &amp;WorkerPool&#123;</span><br><span class=\"line\">        workerlen:   workerlen,</span><br><span class=\"line\">        JobQueue:    make(chan Job),</span><br><span class=\"line\">        WorkerQueue: make(chan chan Job, workerlen),</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func (wp *WorkerPool) Run() &#123;</span><br><span class=\"line\">    //初始化worker</span><br><span class=\"line\">    for i := 0; i &lt; wp.workerlen; i++ &#123;</span><br><span class=\"line\">        worker := NewWorker()</span><br><span class=\"line\">        worker.Run(wp.WorkerQueue)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    go func() &#123;</span><br><span class=\"line\">        for &#123;</span><br><span class=\"line\">            select &#123;</span><br><span class=\"line\">            case job := &lt;-wp.JobQueue:</span><br><span class=\"line\">                worker := &lt;-wp.WorkerQueue</span><br><span class=\"line\">                worker &lt;- job</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"Algorithm-Problem-组合数字","slug":"Algorithm-Problem-组合数字"},"next":{"title":"TCP协议三次握手连接和四次握手断开","slug":"TCP协议三次握手连接和四次握手断开"},"link":"http://yoursite.com/post/golang高并发实例/"}