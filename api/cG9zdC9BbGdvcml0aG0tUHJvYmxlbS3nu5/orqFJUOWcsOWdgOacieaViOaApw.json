{"title":"Algorithm-Problem-统计IP地址有效性","date":"2020-03-16T12:37:53.000Z","slug":"Algorithm-Problem-统计IP地址有效性","comments":true,"updated":"2020-03-16T12:42:50.915Z","content":"<h3 id=\"题目描述\">题目描述<a href=\"post/Algorithm-Problem-统计IP地址有效性#题目描述\"></a></h3><p>请解析IP地址和对应的掩码，进行分类识别。要求按照A/B/C/D/E类地址归类，不合法的地址和掩码单独归类。</p>\n<p>所有的IP地址划分为 A,B,C,D,E五类</p>\n<p>A类地址1.0.0.0~126.255.255.255;<br>B类地址128.0.0.0~191.255.255.255;</p>\n<p>C类地址192.0.0.0~223.255.255.255;<br>D类地址224.0.0.0~239.255.255.255；<br>E类地址240.0.0.0~255.255.255.255；</p>\n<p>私网IP范围是：<br>10.0.0.0～10.255.255.255<br>172.16.0.0～172.31.255.255<br>192.168.0.0～192.168.255.255</p>\n<p>子网掩码为前面是连续的1，然后全是0。（例如：255.255.255.32就是一个非法的掩码）<br>本题暂时默认以0开头的IP地址是合法的，比如0.1.1.2，是合法地址</p>\n<h3 id=\"输入描述\">输入描述:<a href=\"post/Algorithm-Problem-统计IP地址有效性#输入描述\"></a></h3><p>多行字符串。每行一个IP地址和掩码，用~隔开。<br>输出描述:<br>统计A、B、C、D、E、错误IP地址或错误掩码、私有IP的个数，之间以空格隔开。</p>\n<p>输入<br>10.70.44.68~255.254.255.0<br>1.0.0.1~255.0.0.0<br>192.168.0.2~255.255.255.0<br>19..0.~255.255.255.0<br>输出<br>1 0 1 0 0 2 1</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bitset&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">enum</span> AddrType &#123;</span><br><span class=\"line\">    ADDR_NONE,</span><br><span class=\"line\">    ADDR_A,</span><br><span class=\"line\">    ADDR_B,</span><br><span class=\"line\">    ADDR_C,</span><br><span class=\"line\">    ADDR_D,</span><br><span class=\"line\">    ADDR_E</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">supersplit</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; s, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&gt;&amp; v, <span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span>::size_type pos1, pos2;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> len = s.length();</span><br><span class=\"line\">    pos2 = s.find(c);</span><br><span class=\"line\">    pos1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">string</span>::npos != pos2) &#123;</span><br><span class=\"line\">        v.emplace_back(s.substr(pos1, pos2 - pos1));</span><br><span class=\"line\">        pos1 = pos2 + c.size();</span><br><span class=\"line\">        pos2 = s.find(c, pos1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pos1 != len) &#123;</span><br><span class=\"line\">        v.emplace_back(s.substr(pos1));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">validMask</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; mask)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; maskItems;</span><br><span class=\"line\">    supersplit(mask, maskItems, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (maskItems.size() != <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">string</span> binaryFormat;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; maskItems.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = atoi(maskItems[i].c_str());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val &gt; <span class=\"number\">255</span> || val &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">bitset</span>&lt;8&gt; t(val);</span><br><span class=\"line\">        binaryFormat += t.to_string();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> startIndex = binaryFormat.size() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (startIndex &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (binaryFormat[startIndex] == <span class=\"string\">'1'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        startIndex--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (startIndex &lt; <span class=\"number\">0</span> || startIndex == binaryFormat.size() - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= startIndex; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (binaryFormat[i] == <span class=\"string\">'0'</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">validIp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; ipStr, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; ip)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ipStr.empty()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; splits;</span><br><span class=\"line\">    supersplit(ipStr, splits, <span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (splits.size() != <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; splits.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (splits[i].empty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> val = atoi(splits[i].c_str());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val &lt; <span class=\"number\">0</span> || val &gt; <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ip = splits;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">ipType</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; ip, AddrType&amp; type, <span class=\"keyword\">bool</span>&amp; isPrivate)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> firstVal = atoi(ip[<span class=\"number\">0</span>].c_str());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstVal == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        isPrivate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        type = ADDR_A;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstVal == <span class=\"number\">172</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> secVal = atoi(ip[<span class=\"number\">1</span>].c_str());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (secVal &gt;= <span class=\"number\">16</span> &amp;&amp; secVal &lt;= <span class=\"number\">31</span>) &#123;</span><br><span class=\"line\">            isPrivate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            type = ADDR_B;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstVal == <span class=\"number\">192</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> secVal = atoi(ip[<span class=\"number\">1</span>].c_str());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (secVal == <span class=\"number\">168</span>) &#123;</span><br><span class=\"line\">            isPrivate = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            type = ADDR_C;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    isPrivate = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstVal &gt;= <span class=\"number\">1</span> &amp;&amp; firstVal &lt;= <span class=\"number\">126</span>) &#123;</span><br><span class=\"line\">        type = ADDR_A;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstVal &gt;= <span class=\"number\">128</span> &amp;&amp; firstVal &lt;= <span class=\"number\">191</span>) &#123;</span><br><span class=\"line\">        type = ADDR_B;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstVal &gt;= <span class=\"number\">192</span> &amp;&amp; firstVal &lt;= <span class=\"number\">223</span>) &#123;</span><br><span class=\"line\">        type = ADDR_C;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstVal &gt;= <span class=\"number\">224</span> &amp;&amp; firstVal &lt;= <span class=\"number\">239</span>) &#123;</span><br><span class=\"line\">        type = ADDR_D;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstVal &gt;= <span class=\"number\">240</span> &amp;&amp; firstVal &lt;= <span class=\"number\">255</span>) &#123;</span><br><span class=\"line\">        type = ADDR_E;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        type = ADDR_NONE;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">loadData</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"built_in\">string</span>&amp; file, <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt;&amp; items)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">ifstream <span class=\"title\">fin</span><span class=\"params\">(file)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> line;</span><br><span class=\"line\">    getline(fin, line);</span><br><span class=\"line\">    supersplit(line, items, <span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> input;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; inputs;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (getline(<span class=\"built_in\">cin</span>, input)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (input == <span class=\"string\">\"\"</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        inputs.push_back(input);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> typeACount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> typeBCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> typeCCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> typeDCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> typeECount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> typeErrorCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> typePrivateCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; inputs.size(); i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> ip;</span><br><span class=\"line\">        <span class=\"built_in\">string</span> mask;</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; splits;</span><br><span class=\"line\">        supersplit(inputs[i], splits, <span class=\"string\">\"~\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (splits.size() != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ip = splits[<span class=\"number\">0</span>];</span><br><span class=\"line\">        mask = splits[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">string</span>&gt; ips;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!validMask(mask) || !validIp(ip, ips)) &#123;</span><br><span class=\"line\">            typeErrorCount += <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        AddrType type;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> isPrivate = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        ipType(ips, type, isPrivate);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPrivate) &#123;</span><br><span class=\"line\">            typePrivateCount += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ADDR_A:</span><br><span class=\"line\">                typeACount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ADDR_B:</span><br><span class=\"line\">                typeBCount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ADDR_C:</span><br><span class=\"line\">                typeCCount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ADDR_D:</span><br><span class=\"line\">                typeDCount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> ADDR_E:</span><br><span class=\"line\">                typeECount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; typeACount &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">         &lt;&lt; typeBCount &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">         &lt;&lt; typeCCount &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">         &lt;&lt; typeDCount &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">         &lt;&lt; typeECount &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">         &lt;&lt; typeErrorCount &lt;&lt; <span class=\"string\">\" \"</span></span><br><span class=\"line\">         &lt;&lt; typePrivateCount &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"Algorithm-Problem-旋转有序数组的查找","slug":"Algorithm-Problem-旋转有序数组的查找"},"next":{"title":"Algorithm-Problem-两两交换链表中的节点","slug":"Algorithm-Problem-两两交换链表中的节点"},"link":"http://yoursite.com/post/Algorithm-Problem-统计IP地址有效性/"}