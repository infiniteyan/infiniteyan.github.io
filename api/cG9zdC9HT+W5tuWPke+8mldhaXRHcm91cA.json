{"title":"GO并发：WaitGroup","date":"2019-04-04T10:04:03.000Z","slug":"GO并发：WaitGroup","comments":true,"updated":"2019-04-04T10:07:47.856Z","content":"<p>如果你不关心并发操作的结果，或者有其他方式收集结果，那么WaitGroup是等待一组并发操作完成的好方法。如果这两个条件都不成立，我建议你改用channel和select语句。WaitGroup非常有用，我先介绍它，以便在后续章节中使用它。以下是使用WaitGroup等待goroutine完成的基本示例：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var wg sync.WaitGroup</span><br><span class=\"line\"></span><br><span class=\"line\">wg.Add(<span class=\"number\">1</span>) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"function\">go <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tdefer wg.Done() <span class=\"comment\">//2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"1st goroutine sleeping...\"</span>)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">wg.Add(<span class=\"number\">1</span>) <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"function\">go <span class=\"title\">func</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tdefer wg.Done() <span class=\"comment\">//2</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"2nd goroutine sleeping...\"</span>)</span><br><span class=\"line\">\ttime.Sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">wg.Wait() <span class=\"comment\">//3</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">\"All goroutines complete.\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>1.里我们调用Add并传入参数1来表示一个goroutine正在开始。<br>2.在这里我们使用defer关键字来调用Done，以确保在退出goroutine的闭包之前，向WaitGroup表明了我们已经退出。<br>3.在这里，我们调用Wait，这将main goroutine，直到所有的goroutine都表明它们已经退出。</p>\n<p>这会输出：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span>nd goroutine sleeping... </span><br><span class=\"line\"><span class=\"number\">1</span>st goroutine sleeping... </span><br><span class=\"line\">All goroutines complete.</span><br></pre></td></tr></table></figure></p>\n<p>你可以把WaitGroup视作一个安全的并发计数器：调用Add增加计数，调用Done减少计数。调用Wait会阻塞并等待至计数器归零。</p>\n<p>请注意，Add的调用是在goroutines之外完成的。 如果没有这样做，我们会引入一个数据竞争条件，因为我们没有对goroutine做任何调度顺序上的保证; 我们可能在任何一个goroutines开始前触发Wait调用。 如果Add的调用被放置在goroutines的闭包中，对Wait的调用可能完全没有阻塞地返回，因为Add没有被执行。<br>通常情况下，尽可能与要跟踪的goroutine就近且成对的调用Add，但有时候会一次性调用Add来跟踪一组goroutine。我通常会做这样的循环：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello := func(wg *sync.WaitGroup, id <span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">\tdefer wg.Done()</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">\"Hello from %v!\\n\"</span>, id)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> numGreeters = <span class=\"number\">5</span></span><br><span class=\"line\">var wg sync.WaitGroup</span><br><span class=\"line\">wg.Add(numGreeters)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; numGreeters; i++ &#123;</span><br><span class=\"line\">\t<span class=\"function\">go <span class=\"title\">hello</span><span class=\"params\">(&amp;wg, i+<span class=\"number\">1</span>)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">wg.Wait()</span><br></pre></td></tr></table></figure></p>\n<p>这会输出：<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello from <span class=\"number\">5</span>!</span><br><span class=\"line\">Hello from <span class=\"number\">4</span>!</span><br><span class=\"line\">Hello from <span class=\"number\">3</span>!</span><br><span class=\"line\">Hello from <span class=\"number\">2</span>!</span><br><span class=\"line\">Hello from <span class=\"number\">1</span>!</span><br></pre></td></tr></table></figure></p>\n","next":{"title":"GO语言实现双链表","slug":"GO语言实现双链表"},"link":"http://yoursite.com/post/GO并发：WaitGroup/"}