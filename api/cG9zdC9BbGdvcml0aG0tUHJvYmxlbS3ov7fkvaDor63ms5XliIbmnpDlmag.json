{"title":"Algorithm-Problem-迷你语法分析器","date":"2020-03-18T14:54:21.000Z","slug":"Algorithm-Problem-迷你语法分析器","comments":true,"updated":"2020-03-18T14:56:50.623Z","content":"<h3 id=\"问题描述\">问题描述<a href=\"post/Algorithm-Problem-迷你语法分析器#问题描述\"></a></h3><p>给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。<br>列表中的每个元素只可能是整数或整数嵌套列表<br>提示：你可以假定这些字符串都是格式良好的：<br>字符串非空<br>字符串不包含空格<br>字符串只包含数字0-9, [, - ,, ]</p>\n<p>示例 1：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 s = &quot;324&quot;,</span><br><span class=\"line\">你应该返回一个 NestedInteger 对象，其中只包含整数值 324。</span><br></pre></td></tr></table></figure></p>\n<p>示例 2：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给定 s = &quot;[123,[456,[789]]]&quot;,</span><br><span class=\"line\">返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表：</span><br><span class=\"line\">1. 一个 integer 包含值 123</span><br><span class=\"line\">2. 一个包含两个元素的嵌套列表：</span><br><span class=\"line\">    i.  一个 integer 包含值 456</span><br><span class=\"line\">    ii. 一个包含一个元素的嵌套列表</span><br><span class=\"line\">         a. 一个 integer 包含值 789</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"解题思路\">解题思路<a href=\"post/Algorithm-Problem-迷你语法分析器#解题思路\"></a></h3><p>栈</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"container/list\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strings\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type NestedInteger <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tval \t<span class=\"keyword\">int</span></span><br><span class=\"line\">\tchilds \t[]*NestedInteger</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n NestedInteger) IsInteger() <span class=\"keyword\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n.val == <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n NestedInteger) GetInteger() <span class=\"keyword\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n.val</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *NestedInteger) SetInteger(value <span class=\"keyword\">int</span>) &#123;</span><br><span class=\"line\">\tn.val = value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *NestedInteger) Add(elem NestedInteger) &#123;</span><br><span class=\"line\">\tn.childs = append(n.childs, &amp;elem)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n NestedInteger) GetList() []*NestedInteger &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n.childs</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func reverseStr(s <span class=\"built_in\">string</span>) <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">\tvar result <span class=\"built_in\">string</span></span><br><span class=\"line\">\tlength := len(s)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i-- &#123;</span><br><span class=\"line\">\t\tresult += <span class=\"built_in\">string</span>(s[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func convertToValue(s <span class=\"built_in\">string</span>, val *<span class=\"keyword\">int</span>) <span class=\"keyword\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> len(s) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ts = strings.Trim(s, <span class=\"string\">\"[]\"</span>)</span><br><span class=\"line\">\tvalue, err := strconv.Atoi(s)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*val = value</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func deserialize(s <span class=\"built_in\">string</span>) *NestedInteger &#123;</span><br><span class=\"line\">\tresult := &amp;NestedInteger&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> len(s) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> nil</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">stack</span> := <span class=\"built_in\">list</span>.New()</span><br><span class=\"line\">\tlength := len(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar child []*NestedInteger</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; length; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> s[i] != <span class=\"string\">']'</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">stack</span>.PushBack(<span class=\"built_in\">string</span>(s[i]))</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tvar str <span class=\"built_in\">string</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> <span class=\"built_in\">stack</span>.Len() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\t\tback := <span class=\"built_in\">stack</span>.Back()</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> back.Value.(<span class=\"built_in\">string</span>) != <span class=\"string\">\"[\"</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tstr += back.Value.(<span class=\"built_in\">string</span>)</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">stack</span>.Len() != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">stack</span>.Back().Value.(<span class=\"built_in\">string</span>) == <span class=\"string\">\",\"</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Back())</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tvalue := <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\tsuccess := convertToValue(reverseStr(str), &amp;value)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> child == nil &#123;</span><br><span class=\"line\">\t\t\t\titem := NestedInteger&#123;&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">\t\t\t\t\titem.SetInteger(value)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tchild = append([]*NestedInteger&#123;&#125;, &amp;item)</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\titem := NestedInteger&#123;&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> success &#123;</span><br><span class=\"line\">\t\t\t\t\titem.SetInteger(value)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> _, v := range child &#123;</span><br><span class=\"line\">\t\t\t\t\titem.Add(*v)</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tchild = append([]*NestedInteger&#123;&#125;, &amp;item)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">stack</span>.Len() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tvar str <span class=\"built_in\">string</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> <span class=\"built_in\">stack</span>.Len() != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tstr += <span class=\"built_in\">stack</span>.Front().Value.(<span class=\"built_in\">string</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">stack</span>.Remove(<span class=\"built_in\">stack</span>.Front())</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvar value <span class=\"keyword\">int</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> convertToValue(str, &amp;value) &#123;</span><br><span class=\"line\">\t\t\tresult.SetInteger(value)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tresult = child[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\ts := <span class=\"string\">\"[123,[456,[789]]]\"</span></span><br><span class=\"line\">\tnestedInteger := deserialize(s)</span><br><span class=\"line\">\tfmt.Println(nestedInteger.val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"Algorithm-Problem-简化路径","slug":"Algorithm-Problem-简化路径"},"next":{"title":"Algorithm-Problem-删点成林","slug":"Algorithm-Problem-删点成林"},"link":"http://yoursite.com/post/Algorithm-Problem-迷你语法分析器/"}