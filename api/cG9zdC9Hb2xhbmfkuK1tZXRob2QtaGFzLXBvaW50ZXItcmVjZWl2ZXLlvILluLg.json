{"title":"Golang中method has pointer receiver异常","date":"2019-05-05T04:29:25.000Z","slug":"Golang中method-has-pointer-receiver异常","comments":true,"updated":"2019-05-05T04:35:01.900Z","content":"<p>在Golang中使用interface遇到了一个有意思的问题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">method has pointer receiver</span><br></pre></td></tr></table></figure></p>\n<p>这个问题很普遍，所以在此记录先来。<br>先看以下例子：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">// notifier is an interface that defined</span><br><span class=\"line\">// type behavior.</span><br><span class=\"line\"></span><br><span class=\"line\">type notifier interface &#123;</span><br><span class=\"line\">    notify()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// user defines a user in the program.</span><br><span class=\"line\"></span><br><span class=\"line\">type user struct &#123;</span><br><span class=\"line\">    name  string</span><br><span class=\"line\">    email string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// notify implements a method with a poi</span><br><span class=\"line\">func (u *user) notify() &#123;   </span><br><span class=\"line\">    fmt.Printf(&quot;Sending user email to %s“,u.name）</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// main is the entry point for the appli</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Create a value of type User and s</span><br><span class=\"line\">    u := user&#123;&quot;Bill&quot;, &quot;bill@email.com&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendNotification(u)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func sendNotification(n notifier) &#123;</span><br><span class=\"line\">     n.notify()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行以上代码，会得到一个这样的错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./listing36.go:32: cannot use u (type user) as type</span><br><span class=\"line\">                   notifier in argument to sendNotification:</span><br><span class=\"line\">user does not implement notifier (notify method has pointer receiver)</span><br></pre></td></tr></table></figure></p>\n<p>为了解决这个问题，首先得先了解一下Golang 中 方法的集合的概念，一个struct虽然可以通过值类型和引用类型两种方式定义方法，但是不通的对象类型对应了不同的方法集：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Values                    Methods Receivers</span><br><span class=\"line\">-----------------------------------------------</span><br><span class=\"line\"> T                        (t T)</span><br><span class=\"line\">*T                        (t T) and (t *T)</span><br></pre></td></tr></table></figure></p>\n<p>值类型的对象只有（t T) 结构的方法，虽然值类型的对象也可以调用(t *T) 方法，但这实际上是Golang编译器自动转化成了&amp;t的形式来调用方法，并不是表明值类型的对象拥有该方法。<br>换一个维度来看上面的表格可能更加直观：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Methods Receivers         Values</span><br><span class=\"line\">-----------------------------------------------</span><br><span class=\"line\">(t T)                     T and *T</span><br><span class=\"line\"></span><br><span class=\"line\">(t *T)                    *T</span><br></pre></td></tr></table></figure></p>\n<p>这就意味着指针类型的receiver 方法实现接口时，只有指针类型的对象实现了该接口。<br>对应上面的例子来说，只有&amp;user实现了notifier接口，而user根本没有实现该接口。所以上面代码会报出这样的异常:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">notify method has pointer receiver</span><br></pre></td></tr></table></figure></p>\n<p>解决这个问题也很容易，直接使用&amp;user去代替user调用方法即可：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    // Create a value of type User and send a notification.</span><br><span class=\"line\">    u := user&#123;&quot;Bill&quot;, &quot;bill@email.com&quot;&#125;</span><br><span class=\"line\">    sendNotification(&amp;u)</span><br><span class=\"line\">    // PASSED THE ADDRESS AND NO MORE ERROR.</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"GO语言新手可能会踩的50个坑（一）","slug":"GO语言新手可能会踩的50个坑（一）"},"next":{"title":"HTTP负载测试工具Vegeta","slug":"HTTP负载测试工具Vegeta"},"link":"http://yoursite.com/post/Golang中method-has-pointer-receiver异常/"}