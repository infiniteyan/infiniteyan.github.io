{"title":"设计模式-观察者模式","date":"2020-05-12T03:13:05.000Z","slug":"设计模式-观察者模式","comments":true,"updated":"2020-05-12T03:14:51.939Z","content":"<h4 id=\"观察者模式\">观察者模式<a href=\"post/设计模式-观察者模式#观察者模式\"></a></h4><p>实现观察者模式时要注意具体目标对象和具体观察者对象之间不能直接调用，否则将使两者之间紧密耦合起来，这违反了面向对象的设计原则。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> public class RMBrateTest &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Rate rate = new RMBrate();</span><br><span class=\"line\">        ICompany company1 = new ImportCompany();</span><br><span class=\"line\">        ICompany company2 = new ExportCompany();</span><br><span class=\"line\"></span><br><span class=\"line\">        rate.add(company1);</span><br><span class=\"line\">        rate.add(company2);</span><br><span class=\"line\">        rate.change(10);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">abstract class Rate &#123;</span><br><span class=\"line\">    protected List&lt;ICompany&gt; mCompanies = new ArrayList&lt;ICompany&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void add(ICompany company) &#123;</span><br><span class=\"line\">        this.mCompanies.add(company);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void remove(ICompany company) &#123;</span><br><span class=\"line\">        this.mCompanies.remove(company);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public abstract void change(int num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class RMBrate extends Rate &#123;</span><br><span class=\"line\">    public void change(int num) &#123;</span><br><span class=\"line\">        for (ICompany obs : this.mCompanies) &#123;</span><br><span class=\"line\">            obs.response(num);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interface ICompany &#123;</span><br><span class=\"line\">    void response(int num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ImportCompany implements ICompany &#123;</span><br><span class=\"line\">    public void response(int num) &#123;</span><br><span class=\"line\">        if (num &gt; 0) &#123;</span><br><span class=\"line\">            Log.e(&quot;RMBrateTest&quot;, &quot;人民币汇率升值&quot; + num + &quot;个基点，降低了进口产品成本，提升了进口公司利润率。&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            Log.e(&quot;RMBrateTest&quot;, &quot;人民币汇率贬值&quot; + num + &quot;个基点，提升了进口产品成本，降低了进口公司利润率。&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ExportCompany implements ICompany &#123;</span><br><span class=\"line\">    public void response(int num) &#123;</span><br><span class=\"line\">        if (num &gt; 0) &#123;</span><br><span class=\"line\">            Log.e(&quot;RMBrateTest&quot;, &quot;人民币汇率升值&quot; + num + &quot;个基点，降低了出口产品收入，降低了出口公司的销售利润率。&quot;);</span><br><span class=\"line\">        &#125; else if(num &lt; 0) &#123;</span><br><span class=\"line\">            Log.e(&quot;RMBrateTest&quot;, &quot;人民币汇率贬值&quot; + num + &quot;个基点，提升了出口产品收入，提升了出口公司的销售利润率。&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"设计模式-责任链模式","slug":"设计模式-责任链模式"},"next":{"title":"Android之jni解决JNIEnv跨线程问题","slug":"Android之jni解决JNIEnv跨线程问题"},"link":"http://yoursite.com/post/设计模式-观察者模式/"}