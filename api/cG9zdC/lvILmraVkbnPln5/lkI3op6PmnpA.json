{"title":"异步dns域名解析","date":"2020-03-07T15:47:33.000Z","slug":"异步dns域名解析","comments":true,"updated":"2020-03-07T15:52:06.805Z","content":"<h3 id=\"getaddrinfo\">getaddrinfo<a href=\"post/异步dns域名解析#getaddrinfo\"></a></h3><p>域名到IP地址的DNS解析过程大致如下：当某个应用需要把主机名解析为IP地址时，该应用进程就调用解析程序，把待解析的域名放在DNS请求报文中，以UDP用户数据报方式发给本地域名服务器。本地域名服务器在查找域名后，把对应的IP地址放在回答报文中返回。应用程序获得目的主机的IP地址后即可进行通信。若本地域名服务器不能回答该请求，则此域名服务器就暂时称为DNS的另一个客户，并向其他域名服务器发出查询请求。这种过程直至找到能够回答该请求的域名服务器为止。由于DNS是分布式系统，因此这种迭代过程也许会重复很久。<br>getaddrinfo即遵循上述过程进行DNS解析的。因此它有个最重要的特征–同步阻塞。也就是说，getaddrinfo会一直阻塞，直到返回成功或者失败。根据实测，成功时一般几十毫秒即可，失败时往往需要30秒以上。这对于实际应用中来说，一般是不可忍受的。</p>\n<h3 id=\"异步域名解析方案\">异步域名解析方案<a href=\"post/异步dns域名解析#异步域名解析方案\"></a></h3><p>c-ares是一个C语言实现的DNS非阻塞异步解析库,可以控制域名解析的重试次数和单次超时时间, 可以很方便的和使用者的事件循环统一起来，实现DNS的非阻塞异步解析，libcurl, libevent, gevent, nodejs都在使用。可以解决域名解析长时间超时卡住的问题.  具体使用demo如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netdb.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ares.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/select.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> IP_LEN 32</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> host[<span class=\"number\">64</span>];</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ip[<span class=\"number\">5</span>][IP_LEN];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">&#125;IpList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">dnsCallback</span><span class=\"params\">(<span class=\"keyword\">void</span>* arg, <span class=\"keyword\">int</span> status, <span class=\"keyword\">int</span> timeouts, struct hostent* hptr)</span> </span>&#123;</span><br><span class=\"line\">    IpList *ips = (IpList*)arg;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ips == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (status == ARES_SUCCESS) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">strncpy</span>(ips-&gt;host, hptr-&gt;h_name, <span class=\"keyword\">sizeof</span>(ips-&gt;host));</span><br><span class=\"line\">        <span class=\"keyword\">char</span> **pptr = hptr-&gt;h_addr_list;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; *pptr != <span class=\"literal\">NULL</span> &amp;&amp; i &lt; <span class=\"number\">5</span>; pptr++, ++i) &#123;</span><br><span class=\"line\">            inet_ntop(hptr-&gt;h_addrtype, *pptr, ips-&gt;ip[ips-&gt;count++], IP_LEN);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"lookup failed:%d\\n\"</span>, status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">domainResolution</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * lpDomainName, IpList &amp;ips, <span class=\"keyword\">int</span> retry, <span class=\"keyword\">int</span> timeout_sec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> success = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    ares_channel channel;</span><br><span class=\"line\">    success = ares_library_init(ARES_LIB_INIT_ALL);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((success = ares_init(&amp;channel)) != ARES_SUCCESS) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> trytime = retry;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        fd_set readers, writers;</span><br><span class=\"line\">        timeval tv;</span><br><span class=\"line\">        tv.tv_sec = timeout_sec;</span><br><span class=\"line\">        tv.tv_usec = <span class=\"number\">0</span>;</span><br><span class=\"line\">        FD_ZERO(&amp;readers);</span><br><span class=\"line\">        FD_ZERO(&amp;writers);</span><br><span class=\"line\">        <span class=\"comment\">//ares_set_servers_csv(channel, \"114.114.114.114\");   //可选择设置域名解析服务器</span></span><br><span class=\"line\">        ares_gethostbyname(channel, lpDomainName, AF_INET, dnsCallback, (<span class=\"keyword\">void</span>*)(&amp;ips));</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nfds = ares_fds(channel, &amp;readers, &amp;writers);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nfds == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = select(nfds, &amp;readers, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>, &amp;tv);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ares_process(channel, &amp;readers, &amp;writers);</span><br><span class=\"line\">            success= <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            success= <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (trytime-- &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    ares_destroy(channel);</span><br><span class=\"line\">    ares_library_cleanup();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> success;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</span><br><span class=\"line\">    IpList ips;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(&amp;ips, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ips));</span><br><span class=\"line\">    domainResolution(<span class=\"string\">\"www.baidu.com\"</span>, ips, <span class=\"number\">2</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hostname:%s\\n\"</span>, ips.host);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ips.count; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"address ip:%s\\n\"</span>, ips.ip[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","prev":{"title":"Algorithm-Problem-按递增顺序显示卡牌","slug":"Algorithm-Problem-按递增顺序显示卡牌"},"next":{"title":"Algorithm-Problem-二叉树转换成链表","slug":"Algorithm-Problem-二叉树转换成链表"},"link":"http://yoursite.com/post/异步dns域名解析/"}