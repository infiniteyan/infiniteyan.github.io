{"title":"设计模式-责任链模式","date":"2020-05-12T05:38:59.000Z","slug":"设计模式-责任链模式","comments":true,"updated":"2020-05-12T05:40:31.029Z","content":"<h4 id=\"责任链模式\">责任链模式<a href=\"post/设计模式-责任链模式#责任链模式\"></a></h4><p>责任链（Chain of Responsibility）模式的定义：为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.testapplication;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ChainOfResponsibilityPattern &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Handler handler1 = new ConcreteHandler1();</span><br><span class=\"line\">        Handler handler2 = new ConcreteHandler2();</span><br><span class=\"line\">        Handler handler3 = new ConcreteHandler3();</span><br><span class=\"line\">        handler1.setNext(handler2);</span><br><span class=\"line\">        handler2.setNext(handler3);</span><br><span class=\"line\"></span><br><span class=\"line\">        handler1.handleRequest(&quot;two&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">abstract class Handler &#123;</span><br><span class=\"line\">    private Handler mHandler;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setNext(Handler handler) &#123;</span><br><span class=\"line\">        this.mHandler = handler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Handler getNext() &#123;</span><br><span class=\"line\">        return this.mHandler;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public abstract void handleRequest(String req);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteHandler1 extends Handler &#123;</span><br><span class=\"line\">    public void handleRequest(String req) &#123;</span><br><span class=\"line\">        if (req.equals(&quot;one&quot;)) &#123;</span><br><span class=\"line\">            System.out.println(&quot;具体处理者1负责处理该请求!&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            if (getNext() != null) &#123;</span><br><span class=\"line\">                getNext().handleRequest(req);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                System.out.println(&quot;没有人处理该请求！&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteHandler2 extends Handler &#123;</span><br><span class=\"line\">    public void handleRequest(String req) &#123;</span><br><span class=\"line\">        if (req.equals(&quot;two&quot;)) &#123;</span><br><span class=\"line\">            System.out.println(&quot;具体处理者2负责处理该请求!&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            if (getNext() != null) &#123;</span><br><span class=\"line\">                getNext().handleRequest(req);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                System.out.println(&quot;没有人处理该请求！&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class ConcreteHandler3 extends Handler &#123;</span><br><span class=\"line\">    public void handleRequest(String req) &#123;</span><br><span class=\"line\">        if (req.equals(&quot;three&quot;)) &#123;</span><br><span class=\"line\">            System.out.println(&quot;具体处理者3负责处理该请求!&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            if (getNext() != null) &#123;</span><br><span class=\"line\">                getNext().handleRequest(req);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                System.out.println(&quot;没有人处理该请求！&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","next":{"title":"设计模式-观察者模式","slug":"设计模式-观察者模式"},"link":"http://yoursite.com/post/设计模式-责任链模式/"}