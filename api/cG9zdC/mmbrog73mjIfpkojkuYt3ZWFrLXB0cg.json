{"title":"智能指针之weak_ptr","date":"2020-03-24T03:22:08.000Z","slug":"智能指针之weak-ptr","comments":true,"updated":"2020-03-24T03:29:12.161Z","content":"<h4 id=\"1-为什么需要weak-ptr？\">1.为什么需要weak_ptr？<a href=\"post/智能指针之weak-ptr#1-为什么需要weak-ptr？\"></a></h4><p>在正式介绍weak_ptr之前，我们先来回忆一下shared_ptr的一些知识。我们知道shared_ptr是采用引用计数的智能指针，多个shared_ptr实例可以指向同一个动态对象，并维护了一个共享的引用计数器。对于引用计数法实现的计数，总是避免不了循环引用（或环形引用）的问题，shared_ptr也不例外。</p>\n<p>我们先来看看下面这个例子：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ClassA() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ClassA Constructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    ~ClassA() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ClassA Destructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;ClassB&gt; pb;  <span class=\"comment\">// 在A中引用B</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ClassB() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ClassB Constructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    ~ClassB() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ClassB Destructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;ClassA&gt; pa;  <span class=\"comment\">// 在B中引用A</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;ClassA&gt; spa = make_shared&lt;ClassA&gt;();</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;ClassB&gt; spb = make_shared&lt;ClassB&gt;();</span><br><span class=\"line\">    spa-&gt;pb = spb;</span><br><span class=\"line\">    spb-&gt;pa = spa;</span><br><span class=\"line\">    <span class=\"comment\">// 函数结束，思考一下：spa和spb会释放资源么？</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码的输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassA Constructor...</span><br><span class=\"line\">ClassB Constructor...</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure></p>\n<p>从上面代码中，ClassA和ClassB间存在着循环引用，从运行结果中我们可以看到：当main函数运行结束后，spa和spb管理的动态资源并没有得到释放，产生了内存泄露。<br>为了解决类似这样的问题，C++11引入了weak_ptr，来打破这种循环引用。</p>\n<h4 id=\"2-weak-ptr是什么？\">2.weak_ptr是什么？<a href=\"post/智能指针之weak-ptr#2-weak-ptr是什么？\"></a></h4><p>weak_ptr是为了配合shared_ptr而引入的一种智能指针，它指向一个由shared_ptr管理的对象而不影响所指对象的生命周期，也就是将一个weak_ptr绑定到一个shared_ptr不会改变shared_ptr的引用计数。不论是否有weak_ptr指向，一旦最后一个指向对象的shared_ptr被销毁，对象就会被释放。从这个角度看，weak_ptr更像是shared_ptr的一个助手而不是智能指针。</p>\n<h4 id=\"3-weak-ptr如何使用？\">3.weak_ptr如何使用？<a href=\"post/智能指针之weak-ptr#3-weak-ptr如何使用？\"></a></h4><p>接下来，我们来看看weak_ptr的简单用法。</p>\n<h5 id=\"3-1-如何创建weak-ptr实例\">3.1 如何创建weak_ptr实例<a href=\"post/智能指针之weak-ptr#3-1-如何创建weak-ptr实例\"></a></h5><p>当我们创建一个weak_ptr时，需要用一个shared_ptr实例来初始化weak_ptr，由于是弱共享，weak_ptr的创建并不会影响shared_ptr的引用计数值。</p>\n<p>示例：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;<span class=\"keyword\">int</span>&gt; sp(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>(<span class=\"number\">5</span>));</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"创建前sp的引用计数：\"</span> &lt;&lt; sp.use_count() &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// use_count = 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    weak_ptr&lt;<span class=\"keyword\">int</span>&gt; wp(sp);</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"创建后sp的引用计数：\"</span> &lt;&lt; sp.use_count() &lt;&lt; <span class=\"built_in\">endl</span>;    <span class=\"comment\">// use_count = 1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-2如何判断weak-ptr指向对象是否存在\">3.2如何判断weak_ptr指向对象是否存在<a href=\"post/智能指针之weak-ptr#3-2如何判断weak-ptr指向对象是否存在\"></a></h5><p>既然weak_ptr并不改变其所共享的shared_ptr实例的引用计数，那就可能存在weak_ptr指向的对象被释放掉这种情况。这时，我们就不能使用weak_ptr直接访问对象。那么我们如何判断weak_ptr指向对象是否存在呢？C++中提供了lock函数来实现该功能。如果对象存在，lock()函数返回一个指向共享对象的shared_ptr，否则返回一个空shared_ptr。</p>\n<p>示例：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A() : a(<span class=\"number\">3</span>) &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A Constructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    ~A() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A Destructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;A&gt; sp(<span class=\"keyword\">new</span> A());</span><br><span class=\"line\">    weak_ptr&lt;A&gt; wp(sp);</span><br><span class=\"line\">    <span class=\"comment\">//sp.reset();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">shared_ptr</span>&lt;A&gt; pa = wp.lock())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; pa-&gt;a &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"wp指向对象为空\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>试试把sp.reset()这行的注释去掉看看结果有什么不同。<br>除此之外，weak_ptr还提供了expired()函数来判断所指对象是否已经被销毁。<br>示例：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    A() : a(<span class=\"number\">3</span>) &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A Constructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    ~A() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"A Destructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;A&gt; sp(<span class=\"keyword\">new</span> A());</span><br><span class=\"line\">    weak_ptr&lt;A&gt; wp(sp);</span><br><span class=\"line\">    sp.reset(); <span class=\"comment\">// 此时sp被销毁</span></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; wp.expired() &lt;&lt; <span class=\"built_in\">endl</span>;  <span class=\"comment\">// true表示已被销毁，否则为false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A Constructor...</span><br><span class=\"line\">A Destructor...</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"3-3如何使用weak-ptr\">3.3如何使用weak_ptr<a href=\"post/智能指针之weak-ptr#3-3如何使用weak-ptr\"></a></h5><p>weak_ptr并没有重载operator-&gt;和operator *操作符，因此不可直接通过weak_ptr使用对象，典型的用法是调用其lock函数来获得shared_ptr示例，进而访问原始对象。<br>最后，我们来看看如何使用weak_ptr来改造最前面的代码，打破循环引用问题。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassA</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ClassA() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ClassA Constructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    ~ClassA() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ClassA Destructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    weak_ptr&lt;ClassB&gt; pb;  <span class=\"comment\">// 在A中引用B</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassB</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    ClassB() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ClassB Constructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    ~ClassB() &#123; <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"ClassB Destructor...\"</span> &lt;&lt; <span class=\"built_in\">endl</span>; &#125;</span><br><span class=\"line\">    weak_ptr&lt;ClassA&gt; pa;  <span class=\"comment\">// 在B中引用A</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;ClassA&gt; spa = make_shared&lt;ClassA&gt;();</span><br><span class=\"line\">    <span class=\"built_in\">shared_ptr</span>&lt;ClassB&gt; spb = make_shared&lt;ClassB&gt;();</span><br><span class=\"line\">    spa-&gt;pb = spb;</span><br><span class=\"line\">    spb-&gt;pa = spa;</span><br><span class=\"line\">    <span class=\"comment\">// 函数结束，思考一下：spa和spb会释放资源么？</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassA Constructor...</span><br><span class=\"line\">ClassB Constructor...</span><br><span class=\"line\">ClassA Destructor...</span><br><span class=\"line\">ClassB Destructor...</span><br><span class=\"line\">Program ended with exit code: 0</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"多线程编程-条件变量","slug":"多线程编程-条件变量"},"next":{"title":"右值引用、move、emplace、emplace_back原理和用法详解","slug":"右值引用、move、emplace、emplace-back原理和用法详解"},"link":"http://yoursite.com/post/智能指针之weak-ptr/"}