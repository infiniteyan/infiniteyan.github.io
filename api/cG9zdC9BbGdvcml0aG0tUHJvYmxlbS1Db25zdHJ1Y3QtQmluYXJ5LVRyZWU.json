{"title":"Algorithm Problem : Construct Binary Tree","date":"2019-03-01T09:53:59.000Z","slug":"Algorithm-Problem-Construct-Binary-Tree","comments":true,"updated":"2019-03-01T09:54:33.670Z","content":"<h6 id=\"Problem-Description\">Problem Description<a href=\"post/Algorithm-Problem-Construct-Binary-Tree#Problem-Description\"></a></h6><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Definition for a binary tree node.</span><br><span class=\"line\"> * struct TreeNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     TreeNode *left;</span><br><span class=\"line\"> *     TreeNode *right;</span><br><span class=\"line\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span><br><span class=\"line\"> * &#125;;</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    // 为了避免数组的复杂操作，这里直接用左右界和数组的引用来代表一段前序遍历和中序遍历</span><br><span class=\"line\">    // 即preorder[lp, rp]代表了当前子树的前序遍历，inorder[li, ri]代表了当前子树的中序遍历</span><br><span class=\"line\">    TreeNode* work(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder, int lp, int rp, int li, int ri) &#123;</span><br><span class=\"line\">        // 判断长度为0的情况</span><br><span class=\"line\">        if (lp &gt; rp) return NULL;</span><br><span class=\"line\">        // 设置根节点</span><br><span class=\"line\">        TreeNode *root = new TreeNode(preorder[lp]);</span><br><span class=\"line\">        // 找到根节点在inorder中的位置</span><br><span class=\"line\">        for (int k = li; k &lt;= ri; k++) &#123;</span><br><span class=\"line\">            if (preorder[lp] == inorder[k]) &#123;</span><br><span class=\"line\">                // 分治处理两棵子树</span><br><span class=\"line\">                root -&gt; left = work(preorder, inorder, lp + 1, lp + (k - li), li, k - 1);</span><br><span class=\"line\">                root -&gt; right = work(preorder, inorder, lp + (k - li) + 1, rp, k + 1, ri);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 返回这棵子树</span><br><span class=\"line\">        return root;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">public:</span><br><span class=\"line\">    TreeNode* buildTree(vector&lt;int&gt;&amp; preorder, vector&lt;int&gt;&amp; inorder) &#123;</span><br><span class=\"line\">        if(preorder.size()==0 || inorder.size()==0)</span><br><span class=\"line\">            return NULL;</span><br><span class=\"line\">        </span><br><span class=\"line\">        return work(preorder, inorder, 0, preorder.size() - 1, 0, inorder.size() - 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","prev":{"title":"Algorithm Problem : 并查集详解","slug":"Algorithm-Problem-并查集详解"},"next":{"title":"Algorithm Problem : Calculating Relative Paths","slug":"Algorithm-Problem-Calculating-Relative-Paths"},"link":"http://yoursite.com/post/Algorithm-Problem-Construct-Binary-Tree/"}