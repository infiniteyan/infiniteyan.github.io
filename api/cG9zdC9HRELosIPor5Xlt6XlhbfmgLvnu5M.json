{"title":"GDB调试工具总结","date":"2019-05-30T04:48:32.000Z","slug":"GDB调试工具总结","comments":true,"updated":"2019-05-30T05:02:30.463Z","content":"<p>GDB是Unix/Linux下非常强大的程序调试工具，最近对其基本使用方法进行学习，做一下总结。</p>\n<h4 id=\"1-gdb工具基本使用\">1.gdb工具基本使用<a href=\"post/GDB调试工具总结#1-gdb工具基本使用\"></a></h4><p>#include &lt;stdio.h&gt;<br>int add(int low,int high)<br>{<br>    int i,sum;<br>    for(i=low;i&lt;=high;i++)<br>        sum = sum + i;<br>    return sum;<br>}<br>int main(int argc,char **argv)<br>{<br>    int result[100];<br>    result[0] = add(1,10);<br>    result[1] = add(1,100);<br>    printf(“result[0] is %d\\nresult[1] is %d \\n”,result[0],result[1]);<br>    return 0;<br>}<br>将这段程序利用gcc gdb.c -o gdb进行编译，运行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[peterwang@localhost gdb]$ gcc gdb.c -o gdb</span><br><span class=\"line\">[peterwang@localhost gdb]$ ./gdb </span><br><span class=\"line\">result[0] is 11413250</span><br><span class=\"line\">result[1] is 11418300 </span><br><span class=\"line\">[peterwang@localhost gdb]$</span><br></pre></td></tr></table></figure></p>\n<p>很明显打印出来的结果是错误的，程序完成的功能是计算1加到10和1加到100的和，打印出来的结果应该是55和5050（这个例子只是为了展示gdb的调试步骤，程序本身的问题很轻松就可以发现），下面利用gdb对程序进行调试。<br>利用gdb调试，需要在gcc编译过程中加上-g选项，这样编译生成的可执行文件才可以利用gdb进行源码调试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[peterwang@localhost gdb]$ gdb gdb</span><br><span class=\"line\">GNU gdb (GDB) Red Hat Enterprise Linux (7.2-83.el6)</span><br><span class=\"line\">Copyright (C) 2010 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class=\"line\">and &quot;show warranty&quot; for details.</span><br><span class=\"line\">This GDB was configured as &quot;i686-redhat-linux-gnu&quot;.</span><br><span class=\"line\">For bug reporting instructions, please see:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</span><br><span class=\"line\">Reading symbols from /home/peterwang/TestProgram/gdb/gdb...done.</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>-g 选项的作用是在可执行文件中加入源代码的信息，比如可执行文件中第几条机器指令对应源代码的第几行，但并不是把整个源文件嵌入到可执行文件中，所以在调试时必须保证gdb能找到源文件。如果把当前的gdb.c改名为g.c或者将gdb.c移动到其他地方，则gdb无法进行调试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[peterwang@localhost gdb]$ mv gdb.c g.c</span><br><span class=\"line\">[peterwang@localhost gdb]$ gdb gdb</span><br><span class=\"line\">GNU gdb (GDB) Red Hat Enterprise Linux (7.2-83.el6)</span><br><span class=\"line\">Copyright (C) 2010 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class=\"line\">and &quot;show warranty&quot; for details.</span><br><span class=\"line\">This GDB was configured as &quot;i686-redhat-linux-gnu&quot;.</span><br><span class=\"line\">For bug reporting instructions, please see:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</span><br><span class=\"line\">Reading symbols from /home/peterwang/TestProgram/gdb/gdb...done.</span><br><span class=\"line\">(gdb) start</span><br><span class=\"line\">Temporary breakpoint 1 at 0x80483f5: file gdb.c, line 18.</span><br><span class=\"line\">Starting program: /home/peterwang/TestProgram/gdb/gdb </span><br><span class=\"line\"></span><br><span class=\"line\">Temporary breakpoint 1, main (argc=1, argv=0xbffff324) at gdb.c:18</span><br><span class=\"line\">18  gdb.c: No such file or directory.</span><br><span class=\"line\">    in gdb.c</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>gdb提供一个类似Shell的命令行环境，上面的(gdb)就是提示符，在这个提示符下输入help可以查看命令的类别：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) help</span><br><span class=\"line\">List of classes of commands:</span><br><span class=\"line\"></span><br><span class=\"line\">aliases -- Aliases of other commands</span><br><span class=\"line\">breakpoints -- Making program stop at certain points</span><br><span class=\"line\">data -- Examining data</span><br><span class=\"line\">files -- Specifying and examining files</span><br><span class=\"line\">internals -- Maintenance commands</span><br><span class=\"line\">obscure -- Obscure features</span><br><span class=\"line\">running -- Running the program</span><br><span class=\"line\">stack -- Examining the stack</span><br><span class=\"line\">status -- Status inquiries</span><br><span class=\"line\">support -- Support facilities</span><br><span class=\"line\">tracepoints -- Tracing of program execution without stopping the program</span><br><span class=\"line\">user-defined -- User-defined commands</span><br><span class=\"line\"></span><br><span class=\"line\">Type &quot;help&quot; followed by a class name for a list of commands in that class.</span><br><span class=\"line\">Type &quot;help all&quot; for the list of all commands.</span><br><span class=\"line\">Type &quot;help&quot; followed by command name for full documentation.</span><br><span class=\"line\">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;.</span><br><span class=\"line\">Command name abbreviations are allowed if unambiguous.</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>可以看出来gdb的命令是分类的，利用help 类别（比如 help data）可以进一步查看data类别下的命令帮助。<br>我们可以利用list(简写为l)命令列出当前程序的代码，默认列出10行，如果想列出更多，可以再次输入list，也可以直接敲击回车键，gdb有个很好用的功能，直接敲击回车键表示执行上一条命令。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) list</span><br><span class=\"line\">9   &#123;</span><br><span class=\"line\">10      int i,sum;</span><br><span class=\"line\">11      for(i=low;i&lt;=high;i++)</span><br><span class=\"line\">12          sum = sum + i;</span><br><span class=\"line\">13      return sum;</span><br><span class=\"line\">14  &#125;</span><br><span class=\"line\">15  int main(int argc,char **argv)</span><br><span class=\"line\">16  &#123;</span><br><span class=\"line\">17      int result[100];</span><br><span class=\"line\">18      result[0] = add(1,10);</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">19      result[1] = add(1,100);</span><br><span class=\"line\">20      printf(&quot;result[0] is %d\\nresult[1] is %d \\n&quot;,result[0],result[1]);  </span><br><span class=\"line\">21      return 0;</span><br><span class=\"line\">22  &#125;</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>gdb调试工具需要首先用start命令开始执行程序，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) start</span><br><span class=\"line\">Temporary breakpoint 1 at 0x80483f5: file gdb.c, line 18.</span><br><span class=\"line\">Starting program: /home/peterwang/TestProgram/gdb/gdb </span><br><span class=\"line\"></span><br><span class=\"line\">Temporary breakpoint 1, main (argc=1, argv=0xbffff324) at gdb.c:18</span><br><span class=\"line\">18      result[0] = add(1,10);</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>gdb停在main函数中变量定义之后的第一条语句处等待我们发命令， gdb列出的这条语句是即将执行<br>的下一条语句。退出gdb调试环境可以利用quit命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) quit</span><br><span class=\"line\">A debugging session is active.</span><br><span class=\"line\"></span><br><span class=\"line\">    Inferior 1 [process 3878] will be killed.</span><br><span class=\"line\"></span><br><span class=\"line\">Quit anyway? (y or n) y</span><br><span class=\"line\">[peterwang@localhost gdb]$</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-单步执行和跟踪函数调用\">2.单步执行和跟踪函数调用<a href=\"post/GDB调试工具总结#2-单步执行和跟踪函数调用\"></a></h4><p>根据上一小节的介绍，我们已经知道如何进入gdb调试工具以及基本知识，本小节将通过gdb调试工具找出上一小节函数输出错误的原因。<br>利用start命令开始gdb调试，我们可以看到程序停在了main函数的result[0] = add(1,10);这一行:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[peterwang@localhost gdb]$ gdb gdb</span><br><span class=\"line\">GNU gdb (GDB) Red Hat Enterprise Linux (7.2-83.el6)</span><br><span class=\"line\">Copyright (C) 2010 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class=\"line\">and &quot;show warranty&quot; for details.</span><br><span class=\"line\">This GDB was configured as &quot;i686-redhat-linux-gnu&quot;.</span><br><span class=\"line\">For bug reporting instructions, please see:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</span><br><span class=\"line\">Reading symbols from /home/peterwang/TestProgram/gdb/gdb...done.</span><br><span class=\"line\">(gdb) start</span><br><span class=\"line\">Temporary breakpoint 1 at 0x80483f5: file gdb.c, line 18.</span><br><span class=\"line\">Starting program: /home/peterwang/TestProgram/gdb/gdb </span><br><span class=\"line\"></span><br><span class=\"line\">Temporary breakpoint 1, main (argc=1, argv=0xbffff324) at gdb.c:18</span><br><span class=\"line\">18      result[0] = add(1,10);</span><br></pre></td></tr></table></figure></p>\n<p>下面我们利用next(简写为n)命令控制程序向下执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) n</span><br><span class=\"line\">19      result[1] = add(1,100);</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">20      printf(&quot;result[0] is %d\\nresult[1] is %d \\n&quot;,result[0],result[1]);  </span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">result[0] is 1218306</span><br><span class=\"line\">result[1] is 1223356 </span><br><span class=\"line\">21      return 0;</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">22  &#125;</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">__libc_start_main (main=0x80483e9 &lt;main&gt;, argc=1, ubp_av=0xbffff324, init=0x8048460 &lt;__libc_csu_init&gt;, fini=0x8048450 &lt;__libc_csu_fini&gt;, rtld_fini=0x11f4c0 &lt;_dl_fini&gt;, stack_end=0xbffff31c) at libc-start.c:258</span><br><span class=\"line\">258   exit (result);</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\"></span><br><span class=\"line\">Program exited normally.</span><br></pre></td></tr></table></figure></p>\n<p>虽然程序正常打印，并且显示正常退出，可以并没有找到程序的问题所在。重新运行start命令，利用step(简写s)跳入add(1,10)函数中进行调试，在add()函数中利用backtrace(简写为bt命令查看函数调用的栈帧：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) start</span><br><span class=\"line\">Temporary breakpoint 2 at 0x80483f5: file gdb.c, line 18.</span><br><span class=\"line\">Starting program: /home/peterwang/TestProgram/gdb/gdb </span><br><span class=\"line\"></span><br><span class=\"line\">Temporary breakpoint 2, main (argc=1, argv=0xbffff324) at gdb.c:18</span><br><span class=\"line\">18      result[0] = add(1,10);</span><br><span class=\"line\">(gdb) s</span><br><span class=\"line\">add (low=1, high=10) at gdb.c:11</span><br><span class=\"line\">11      for(i=low;i&lt;=high;i++)</span><br><span class=\"line\">(gdb) bt</span><br><span class=\"line\">#0  add (low=1, high=10) at gdb.c:11</span><br><span class=\"line\">#1  0x08048409 in main (argc=1, argv=0xbffff324) at gdb.c:18</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>可以看出函数add()被main()函数调用，main传进来的参数是low=1,high=10。main函数的栈帧编号为1， add_range的栈帧编号为0。现在可以利用info(简写为i)查看add()函数中局部变量的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) i locals</span><br><span class=\"line\">i = 1224252</span><br><span class=\"line\">sum = 1218251</span><br></pre></td></tr></table></figure></p>\n<p>可以看到当前add()函数中变量i和变量sum为很大的数，看到这里基本就可以猜出程序错误是由于i和sum未进行初始化导致。<br>如果想查看main函数当前局部变量的值也可以做到，先用frame(简写为f)选择1号栈帧然后再查看局部变量：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) frame 1</span><br><span class=\"line\">#1  0x08048409 in main (argc=1, argv=0xbffff324) at gdb.c:18</span><br><span class=\"line\">18      result[0] = add(1,10);</span><br><span class=\"line\">(gdb) i locals</span><br><span class=\"line\">result = &#123;136, 1241028, 0, 1114836, 1114932, 7, 0, 1114112, 0, 1152850, 1325276, 134513214, -1207961936, -1208025086, 1177933, 134513164, 1244128, 1241028, 1264592, 1, -1073745444, 1154825, 61145, 1241028, -1073745288, 1128753, </span><br><span class=\"line\">  1242396, 1243824, 0, 0, 0, 0, 0, 0, 0, 0, -1207961984, 0, 1245544, 1265112, 1223968, -1073745500, 1300312, 14, 129100401, -1207961984, -163754450, 0, 3, 1243384, 0, 0, 1, 2200, -1207961936, -1207962672, 134513196, 1302392, </span><br><span class=\"line\">  134513100, 1, 1241028, -1073745200, 1243824, -1073745244, 1155338, -1073745260, 134513100, -1073745272, 1243732, 0, -1207961936, 1, 0, 1, 1243384, 1, 13238272, 0, 15773951, 1, 194, 16372, 2892252, 0, -1073745200, 134518456, </span><br><span class=\"line\">  -1073745336, 134513344, 6291456, 134518456, -1073745288, 134513785, 2892252, 134513196, 2903264, 2899956, 134513760, 134513424, 134513771, 2899956&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由于result[]数组也没有进行初始化操作，数组中的数据都是杂乱无章的。继续利用s或者n命令往下走，然后用print(简写为p)打印出变量sum的值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) </span><br><span class=\"line\">12          sum = sum + i;</span><br><span class=\"line\">(gdb) p sum</span><br><span class=\"line\">$1 = 1218251</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>这里sum值打印已经出错了，可以利用finish命令让程序一直运行到从当前函数返回为止或者利用continue(简写为c)命令运行到程序结束，然后修改源代码。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) finish</span><br><span class=\"line\">Run till exit from #0  add (low=1, high=10) at gdb.c:12</span><br><span class=\"line\">0x08048409 in main (argc=1, argv=0xbffff324) at gdb.c:18</span><br><span class=\"line\">18      result[0] = add(1,10);</span><br><span class=\"line\">Value returned is $2 = 1218306</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\">result[0] is 1218306</span><br><span class=\"line\">result[1] is 1223356 </span><br><span class=\"line\"></span><br><span class=\"line\">Program exited normally</span><br></pre></td></tr></table></figure>\n<p>也可以利用set var 变量=XX命令进行变量赋值，运行调试程序，验证思路正确性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) set var sum=0</span><br><span class=\"line\">(gdb) s</span><br><span class=\"line\">11      for(i=low;i&lt;=high;i++)</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">12          sum = sum + i;</span><br><span class=\"line\">(gdb) p sum</span><br><span class=\"line\">$10 = 1</span><br><span class=\"line\">(gdb) finish</span><br><span class=\"line\">Run till exit from #0  add (low=1, high=10) at gdb.c:12</span><br><span class=\"line\">0x08048409 in main (argc=1, argv=0xbffff324) at gdb.c:18</span><br><span class=\"line\">18      result[0] = add(1,10);</span><br><span class=\"line\">Value returned is $11 = 55</span><br></pre></td></tr></table></figure></p>\n<p>从运行结果来看，当把sum变量赋值为0后，add()函数结束时sum的值为55，符合预期的结果。</p>\n<h4 id=\"3-断点调试\">3.断点调试<a href=\"post/GDB调试工具总结#3-断点调试\"></a></h4><p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后可以一步一步往下调试。断点调试是一种非常有效的调试方法。本小节将通过例子进行断点调试的学习。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int sum = 0, i = 0;</span><br><span class=\"line\">    char input[5];</span><br><span class=\"line\">    while (1) &#123;</span><br><span class=\"line\">        scanf(&quot;%s&quot;, input);</span><br><span class=\"line\">        for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">            sum = sum*10 + input[i] - &apos;0&apos;;  //字符型&apos;2&apos;-&apos;0&apos;的ASCII码正好是整形2</span><br><span class=\"line\">        printf(&quot;input=%d\\n&quot;, sum);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>程序运行结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[peterwang@localhost gdb]$ ./gdb_breakpoint </span><br><span class=\"line\">123</span><br><span class=\"line\">input=123</span><br><span class=\"line\">123</span><br><span class=\"line\">input=123123</span><br><span class=\"line\">^C</span><br><span class=\"line\">[peterwang@localhost gdb]$</span><br></pre></td></tr></table></figure></p>\n<p>可以看到程序运行第一次输入结果是正确的，第二次输入123，却输出123123（例子只是单纯的进行gdb测试，高手勿喷），利用gcc -g gdb_breakpoint.c -o gdb_breakpoint编译该代码，运行./gdb gdb_breadpoint并执行start命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[peterwang@localhost gdb]$ gdb gdb_breakpoint</span><br><span class=\"line\">GNU gdb (GDB) Red Hat Enterprise Linux (7.2-83.el6)</span><br><span class=\"line\">Copyright (C) 2010 Free Software Foundation, Inc.</span><br><span class=\"line\">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class=\"line\">This is free software: you are free to change and redistribute it.</span><br><span class=\"line\">There is NO WARRANTY, to the extent permitted by law.  Type &quot;show copying&quot;</span><br><span class=\"line\">and &quot;show warranty&quot; for details.</span><br><span class=\"line\">This GDB was configured as &quot;i686-redhat-linux-gnu&quot;.</span><br><span class=\"line\">For bug reporting instructions, please see:</span><br><span class=\"line\">&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</span><br><span class=\"line\">Reading symbols from /home/peterwang/TestProgram/gdb/gdb_breakpoint...done.</span><br><span class=\"line\">(gdb) start</span><br><span class=\"line\">Temporary breakpoint 1 at 0x804841d: file gdb_breakpoint.c, line 10.</span><br><span class=\"line\">Starting program: /home/peterwang/TestProgram/gdb/gdb_breakpoint </span><br><span class=\"line\"></span><br><span class=\"line\">Temporary breakpoint 1, main () at gdb_breakpoint.c:10</span><br><span class=\"line\">10      int sum = 0, i = 0;</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>执行next(n)命令，根据之前的经验，需要重点怀疑sum和input数组的值的变化，可以利用display sum/input命令时刻观察值的变化。通过undisplay 编号进行取消跟踪显示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) display sum</span><br><span class=\"line\">1: sum = 0</span><br><span class=\"line\">(gdb) display input</span><br><span class=\"line\">2: input = &quot;\\b`\\203\\004\\b&quot;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">123</span><br><span class=\"line\">14          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 0</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">15              sum = sum*10 + input[i] - &apos;0&apos;;</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 0</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">14          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 1</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">15              sum = sum*10 + input[i] - &apos;0&apos;;</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 1</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">14          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 12</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">15              sum = sum*10 + input[i] - &apos;0&apos;;</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 12</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">14          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 123</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">16          printf(&quot;input=%d\\n&quot;, sum);</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 123</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">input=123</span><br><span class=\"line\">18      &#125;</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 123</span><br><span class=\"line\">(gdb)</span><br><span class=\"line\">123</span><br><span class=\"line\">14          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 123</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>可以看出第14步第二次输入数据的时候sum=123这显然不符合程序的本意，可以推断出问题出在sum变量在每次while(1)的时候没有进行赋0操作。问题是找出来了，可是可以看出这样调试效率不是很高，我们可以利用break命令(简写为b)设置断点。break命令可以跟行数也可以跟函数名设置断点。利用info命令(简写为i) breakpoints查看当前的断点信息，利用delete breakpoints 断点编号(info 出来的编号)进行断点删除，delete breakpoints命令是删除所有断点，如果一个断点我们暂时不想使用可以利用disable breakpoints 断点编号直接禁用，利用enbale 断点编号启用断点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) l</span><br><span class=\"line\">5       &gt; Created Time: Tue 12 Apr 2016 05:21:15 PM CST</span><br><span class=\"line\">6    ************************************************************************/</span><br><span class=\"line\">7   #include &lt;stdio.h&gt;</span><br><span class=\"line\">8   int main(void)</span><br><span class=\"line\">9   &#123;</span><br><span class=\"line\">10      int sum = 0, i = 0;</span><br><span class=\"line\">11      char input[5];</span><br><span class=\"line\">12      while (1) &#123;</span><br><span class=\"line\">13          printf(&quot;请输入一个6位以下的数字:\\n&quot;);</span><br><span class=\"line\">14          scanf(&quot;%s&quot;, input);</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">15          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">16              sum = sum*10 + input[i] - &apos;0&apos;;</span><br><span class=\"line\">17          printf(&quot;input=%d\\n&quot;, sum);</span><br><span class=\"line\">18  </span><br><span class=\"line\">19      &#125;</span><br><span class=\"line\">20      return 0;</span><br><span class=\"line\">21  &#125;</span><br><span class=\"line\">(gdb) b 15</span><br><span class=\"line\">Breakpoint 2 at 0x804847e: file gdb_breakpoint.c, line 15.</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\">请输入一个6位以下的数字:</span><br><span class=\"line\">123</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 2, main () at gdb_breakpoint.c:15</span><br><span class=\"line\">15          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 0</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\">input=123</span><br><span class=\"line\">请输入一个6位以下的数字:</span><br><span class=\"line\">123</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 2, main () at gdb_breakpoint.c:15</span><br><span class=\"line\">15          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 123</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\"></span><br><span class=\"line\">(gdb) info breakpoints</span><br><span class=\"line\">Num     Type           Disp Enb Address    What</span><br><span class=\"line\">2       breakpoint     keep y   0x0804847e in main at gdb_breakpoint.c:15</span><br><span class=\"line\">    breakpoint already hit 2 times</span><br><span class=\"line\">(gdb) disable breakpoints 2</span><br><span class=\"line\">(gdb) enable 2</span><br><span class=\"line\">(gdb) delete breakpoints </span><br><span class=\"line\">Delete all breakpoints? (y or n) y</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>我们在程序的15行设置断点，利用continue(c)命令执行程序，直到断点处停下，可以看到第二次输入123的时候，sum的值为123，按照程序逻辑这时候sum应该为0，这里也可以判断出，while(1)中缺少了sum的赋0操作。<br>break命令非常灵活，我们还可以利用条件语句设置断点，比如break 15 if sum!=0仅当sum!=0的时候在15行设置断点，然后利用run(r)命令从头进行调试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb) b 15 if sum!=0</span><br><span class=\"line\">Breakpoint 2 at 0x804847e: file gdb_breakpoint.c, line 15.</span><br><span class=\"line\">(gdb) run</span><br><span class=\"line\">The program being debugged has been started already.</span><br><span class=\"line\">Start it from the beginning? (y or n) y</span><br><span class=\"line\">Starting program: /home/peterwang/TestProgram/gdb/gdb_breakpoint </span><br><span class=\"line\">请输入一个6位以下的数字:</span><br><span class=\"line\">123</span><br><span class=\"line\">input=123</span><br><span class=\"line\">请输入一个6位以下的数字:</span><br><span class=\"line\">123</span><br><span class=\"line\"></span><br><span class=\"line\">Breakpoint 2, main () at gdb_breakpoint.c:15</span><br><span class=\"line\">15          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">2: input = &quot;123\\000\\b&quot;</span><br><span class=\"line\">1: sum = 123</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-观察点调试\">3.观察点调试<a href=\"post/GDB调试工具总结#3-观察点调试\"></a></h4><p>根据上一小节，我们知道在while(1)中加入sum=0程序可以得到正确的结果，可是如果scanf输入数组越界会是什么情况呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[peterwang@localhost gdb]$ ./gdb_breakpoint </span><br><span class=\"line\">请输入一个5位以下的数字:</span><br><span class=\"line\">123</span><br><span class=\"line\">input=123</span><br><span class=\"line\">请输入一个5位以下的数字:</span><br><span class=\"line\">12</span><br><span class=\"line\">input=12</span><br><span class=\"line\">请输入一个5位以下的数字:</span><br><span class=\"line\">12345</span><br><span class=\"line\">input=12345090</span><br><span class=\"line\">请输入一个5位以下的数字:</span><br></pre></td></tr></table></figure></p>\n<p>可以看到输出了一个诡异的结果，进入gdb调试，利用x/7 input命令查看input数组值的变化情况，x代表打印指定存储单元的内容，7代表打印7组。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) start</span><br><span class=\"line\">The program being debugged has been started already.</span><br><span class=\"line\">Start it from the beginning? (y or n) y</span><br><span class=\"line\">Temporary breakpoint 2 at 0x804844d: file gdb_breakpoint.c, line 10.</span><br><span class=\"line\">Starting program: /home/peterwang/TestProgram/gdb/gdb_breakpoint </span><br><span class=\"line\"></span><br><span class=\"line\">Temporary breakpoint 2, main () at gdb_breakpoint.c:10</span><br><span class=\"line\">10      int sum = 0, i = 0;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">13          sum = 0;</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">14          printf(&quot;请输入一个5位以下的数字:\\n&quot;);</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">请输入一个5位以下的数字:</span><br><span class=\"line\">15          scanf(&quot;%s&quot;, input);</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">12345</span><br><span class=\"line\">16          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">(gdb) p input</span><br><span class=\"line\">$2 = &quot;12345&quot;</span><br><span class=\"line\">(gdb) x/7 input </span><br><span class=\"line\">0xbffff253: 0x31    0x32    0x33    0x34    0x35    0x00    0x00</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<p>我们知道断点是当程序执行到某一代码行时中断，而观察点是当程序访问某个存储单<br>元时中断，如果我们不知道某个存储单元是在哪里被改动的，这时候观察点尤其有<br>用。用watch命令设置观察点，跟踪input[4]后面那个字节（可以用input[5]表示，虽然这是访问越界）,利用 info(i) watchpoints查询当前观察点。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) start</span><br><span class=\"line\">Temporary breakpoint 1 at 0x804844d: file gdb_breakpoint.c, line 10.</span><br><span class=\"line\">Starting program: /home/peterwang/TestProgram/gdb/gdb_breakpoint </span><br><span class=\"line\"></span><br><span class=\"line\">Temporary breakpoint 1, main () at gdb_breakpoint.c:10</span><br><span class=\"line\">10      int sum = 0, i = 0;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">13          sum = 0;</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">14          printf(&quot;请输入一个5位以下的数字:\\n&quot;);</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">请输入一个5位以下的数字:</span><br><span class=\"line\">15          scanf(&quot;%s&quot;, input);</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">1234</span><br><span class=\"line\">16          for (i = 0; input[i] != &apos;\\0&apos;; i++)</span><br><span class=\"line\">(gdb) watch input[4]</span><br><span class=\"line\">Hardware watchpoint 2: input[4]</span><br><span class=\"line\">(gdb) c</span><br><span class=\"line\">Continuing.</span><br><span class=\"line\">input=1234</span><br><span class=\"line\">请输入一个5位以下的数字:</span><br><span class=\"line\">12345</span><br><span class=\"line\">Hardware watchpoint 2: input[4]</span><br><span class=\"line\"></span><br><span class=\"line\">Old value = 0 &apos;\\000&apos;</span><br><span class=\"line\">New value = 53 &apos;5&apos;</span><br><span class=\"line\">0x00183f74 in _IO_vfscanf_internal (s=0x35, format=0x400 &lt;Address 0x400 out of bounds&gt;, argptr=0x4850000 &lt;Address 0x4850000 out of bounds&gt;, errp=0x8) at vfscanf.c:1031</span><br><span class=\"line\">1031                  *str++ = c;</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-段错误调试\">4.段错误调试<a href=\"post/GDB调试工具总结#4-段错误调试\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int man = 0;</span><br><span class=\"line\">    scanf(&quot;%d&quot;, man);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用命令gcc -g gdb_segdefault.c -o gdb_segdefault编译这段程序，运行出现段错误提示。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[peterwang@localhost gdb]$ ./gdb_segdefault </span><br><span class=\"line\">123</span><br><span class=\"line\">Segmentation fault (core dumped)</span><br><span class=\"line\">[peterwang@localhost gdb]$</span><br></pre></td></tr></table></figure></p>\n<p>进入gdb调试<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(gdb) start</span><br><span class=\"line\">Temporary breakpoint 1 at 0x80483ed: file gdb_segdefault.c, line 10.</span><br><span class=\"line\">Starting program: /home/peterwang/TestProgram/gdb/gdb_segdefault </span><br><span class=\"line\"></span><br><span class=\"line\">Temporary breakpoint 1, main () at gdb_segdefault.c:10</span><br><span class=\"line\">10      int man = 0;</span><br><span class=\"line\">(gdb) n</span><br><span class=\"line\">11      scanf(&quot;%d&quot;, man);</span><br><span class=\"line\">(gdb) </span><br><span class=\"line\">123</span><br><span class=\"line\"></span><br><span class=\"line\">Program received signal SIGSEGV, Segmentation fault.</span><br><span class=\"line\">0x00182aa5 in _IO_vfscanf_internal (s=0x333231, format=0xffffffff &lt;Address 0xffffffff out of bounds&gt;, argptr=0x0, errp=0xb) at vfscanf.c:1772</span><br><span class=\"line\">1772                *ARG (unsigned int *) = (unsigned int) num.ul;</span><br><span class=\"line\">(gdb) bt</span><br><span class=\"line\">#0  0x00182aa5 in _IO_vfscanf_internal (s=0x333231, format=0xffffffff &lt;Address 0xffffffff out of bounds&gt;, argptr=0x0, errp=0xb) at vfscanf.c:1772</span><br><span class=\"line\">#1  0x0018f939 in __isoc99_scanf (format=0x80484e4 &quot;%d&quot;) at isoc99_scanf.c:37</span><br><span class=\"line\">#2  0x0804840a in main () at gdb_segdefault.c:11</span><br><span class=\"line\">(gdb)</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"HTTP协议之Range、Content-Range","slug":"HTTP协议之Range、Content-Range"},"next":{"title":"GO单元测试、基准测试","slug":"GO单元测试、基准测试"},"link":"http://yoursite.com/post/GDB调试工具总结/"}