{"title":"Linux多线程信号量同步线程","date":"2019-06-20T09:14:47.000Z","slug":"Linux多线程信号量同步线程","comments":true,"updated":"2019-06-20T09:19:20.903Z","content":"<p>信号量、同步这些名词在进程间通信时就已经说过，在这里它们的意思是相同的，只不过是同步的对象不同而已。但是下面介绍的信号量的接口是用于线程的信号量，注意不要跟用于进程间通信的信号量混淆，关于用于进程间通信的信号量的详细介绍可以参阅我的另一篇博文：Linux进程间通信——使用信号量。相似地，线程同步是控制线程执行和访问临界区域的方法。</p>\n<h4 id=\"一、什么是信号量\">一、什么是信号量<a href=\"post/Linux多线程信号量同步线程#一、什么是信号量\"></a></h4><p>线程的信号量与进程间通信中使用的信号量的概念是一样，它是一种特殊的变量，它可以被增加或减少，但对其的关键访问被保证是原子操作。如果一个程序中有多个线程试图改变一个信号量的值，系统将保证所有的操作都将依次进行。<br>而只有0和1两种取值的信号量叫做二进制信号量，在这里将重点介绍。而信号量一般常用于保护一段代码，使其每次只被一个执行线程运行。我们可以使用二进制信号量来完成这个工作。</p>\n<h4 id=\"二、信号量的接口和使用\">二、信号量的接口和使用<a href=\"post/Linux多线程信号量同步线程#二、信号量的接口和使用\"></a></h4><p>信号量的函数都以sem_开头，线程中使用的基本信号量函数有4个，它们都声明在头文件semaphore.h中。<br>1、sem_init函数<br>该函数用于创建信号量，其原型如下：<br>int sem_init(sem_t *sem, int pshared， unsigned int value);<br>该函数初始化由sem指向的信号对象，设置它的共享选项，并给它一个初始的整数值。pshared控制信号量的类型，如果其值为0，就表示这个信号量是当前进程的局部信号量，否则信号量就可以在多个进程之间共享，value为sem的初始值。调用成功时返回0，失败返回-1.</p>\n<p>2、sem_wait函数<br>该函数用于以原子操作的方式将信号量的值减1。原子操作就是，如果两个线程企图同时给一个信号量加1或减1，它们之间不会互相干扰。它的原型如下：<br>int sem_wait(sem_t *sem);<br>sem指向的对象是由sem_init调用初始化的信号量。调用成功时返回0，失败返回-1.</p>\n<p>3、sem_post函数<br>该函数用于以原子操作的方式将信号量的值加1。它的原型如下：<br>int sem_post(sem_t *sem);<br>与sem_wait一样，sem指向的对象是由sem_init调用初始化的信号量。调用成功时返回0，失败返回-1.</p>\n<p>4、sem_destroy函数<br>该函数用于对用完的信号量的清理。它的原型如下：<br>int sem_destroy(sem_t *sem);<br>成功时返回0，失败时返回-1.</p>\n<h4 id=\"三、使用信号量同步线程\">三、使用信号量同步线程<a href=\"post/Linux多线程信号量同步线程#三、使用信号量同步线程\"></a></h4><p>下面以一个简单的多线程程序来说明如何使用信号量进行线程同步。在主线程中，我们创建子线程，并把数组msg作为参数传递给子线程，然后主线程等待直到有文本输入，然后调用sem_post来增加信号量的值，这样就会立刻使子线程从sem_wait的等待中返回并开始执行。线程函数在把字符串的小写字母变成大写并统计输入的字符数量之后，它再次调用sem_wait并再次被阻塞，直到主线程再次调用sem_post增加信号量的值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;pthread.h&gt;</span><br><span class=\"line\">#include &lt;semaphore.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">//线程函数</span><br><span class=\"line\">void *thread_func(void *msg);</span><br><span class=\"line\">sem_t sem;//信号量</span><br><span class=\"line\"> </span><br><span class=\"line\">#define MSG_SIZE 512</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint res = -1;</span><br><span class=\"line\">\tpthread_t thread;</span><br><span class=\"line\">\tvoid *thread_result = NULL;</span><br><span class=\"line\">\tchar msg[MSG_SIZE];</span><br><span class=\"line\">\t//初始化信号量，其初值为0</span><br><span class=\"line\">\tres = sem_init(&amp;sem, 0, 0);</span><br><span class=\"line\">\tif(res == -1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(&quot;semaphore intitialization failed\\n&quot;);</span><br><span class=\"line\">\t\texit(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//创建线程，并把msg作为线程函数的参数</span><br><span class=\"line\">\tres = pthread_create(&amp;thread, NULL, thread_func, msg);</span><br><span class=\"line\">\tif(res != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(&quot;pthread_create failed\\n&quot;);</span><br><span class=\"line\">\t\texit(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//输入信息，以输入end结束，由于fgets会把回车（\\n）也读入，所以判断时就变成了“end\\n”</span><br><span class=\"line\">\tprintf(&quot;Input some text. Enter &apos;end&apos;to finish...\\n&quot;);</span><br><span class=\"line\">\twhile(strcmp(&quot;end\\n&quot;, msg) != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfgets(msg, MSG_SIZE, stdin);</span><br><span class=\"line\">\t\t//把信号量加1</span><br><span class=\"line\">\t\tsem_post(&amp;sem);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tprintf(&quot;Waiting for thread to finish...\\n&quot;);</span><br><span class=\"line\">\t//等待子线程结束</span><br><span class=\"line\">\tres = pthread_join(thread, &amp;thread_result);</span><br><span class=\"line\">\tif(res != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(&quot;pthread_join failed\\n&quot;);</span><br><span class=\"line\">\t\texit(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;Thread joined\\n&quot;);</span><br><span class=\"line\">\t//清理信号量</span><br><span class=\"line\">\tsem_destroy(&amp;sem);</span><br><span class=\"line\">\texit(EXIT_SUCCESS);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void* thread_func(void *msg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t//把信号量减1</span><br><span class=\"line\">\tsem_wait(&amp;sem);</span><br><span class=\"line\">\tchar *ptr = msg;</span><br><span class=\"line\">\twhile(strcmp(&quot;end\\n&quot;, msg) != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\t//把小写字母变成大写</span><br><span class=\"line\">\t\tfor(; ptr[i] != &apos;\\0&apos;; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif(ptr[i] &gt;= &apos;a&apos; &amp;&amp; ptr[i] &lt;= &apos;z&apos;)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tptr[i] -= &apos;a&apos; - &apos;A&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprintf(&quot;You input %d characters\\n&quot;, i-1);</span><br><span class=\"line\">\t\tprintf(&quot;To Uppercase: %s\\n&quot;, ptr);</span><br><span class=\"line\">\t\t//把信号量减1</span><br><span class=\"line\">\t\tsem_wait(&amp;sem);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//退出线程</span><br><span class=\"line\">\tpthread_exit(NULL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"四、分析此信号量同步程序的缺陷\">四、分析此信号量同步程序的缺陷<a href=\"post/Linux多线程信号量同步线程#四、分析此信号量同步程序的缺陷\"></a></h4><p>但是这个程序有一点点的小问题，就是这个程序依赖接收文本输入的时间足够长，这样子线程才有足够的时间在主线程还未准备好给它更多的单词去处理和统计之前处理和统计出工作区中字符的个数。所以当我们连续快速地给它两组不同的单词去统计时，子线程就没有足够的时间支执行，但是信号量已被增加不止一次，所以字符统计线程（子线程）就会反复处理和统计字符数目，并减少信号量的值，直到它再次变成0为止。</p>\n<h4 id=\"五、解决此缺陷的方法\">五、解决此缺陷的方法<a href=\"post/Linux多线程信号量同步线程#五、解决此缺陷的方法\"></a></h4><p>解决方法有两个，一个就是再增加一个信号量，让主线程等到子线程处理统计完成之后再继续执行；另一个方法就是使用互斥量。<br>下面给出用增加一个信号量的方法来解决该问题的代码，源文件名为semthread2.c，源代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;unistd.h&gt;</span><br><span class=\"line\">#include &lt;pthread.h&gt;</span><br><span class=\"line\">#include &lt;semaphore.h&gt;</span><br><span class=\"line\">#include &lt;stdlib.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">//线程函数</span><br><span class=\"line\">void *thread_func(void *msg);</span><br><span class=\"line\">sem_t sem;//信号量</span><br><span class=\"line\">sem_t sem_add;//增加的信号量</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#define MSG_SIZE 512</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint res = -1;</span><br><span class=\"line\">\tpthread_t thread;</span><br><span class=\"line\">\tvoid *thread_result = NULL;</span><br><span class=\"line\">\tchar msg[MSG_SIZE];</span><br><span class=\"line\">\t//初始化信号量,初始值为0</span><br><span class=\"line\">\tres = sem_init(&amp;sem, 0, 0);</span><br><span class=\"line\">\tif(res == -1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(&quot;semaphore intitialization failed\\n&quot;);</span><br><span class=\"line\">\t\texit(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//初始化信号量,初始值为1</span><br><span class=\"line\">\tres = sem_init(&amp;sem_add, 0, 1);</span><br><span class=\"line\">\tif(res == -1)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(&quot;semaphore intitialization failed\\n&quot;);</span><br><span class=\"line\">\t\texit(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//创建线程，并把msg作为线程函数的参数</span><br><span class=\"line\">\tres = pthread_create(&amp;thread, NULL, thread_func, msg);</span><br><span class=\"line\">\tif(res != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(&quot;pthread_create failed\\n&quot;);</span><br><span class=\"line\">\t\texit(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//输入信息，以输入end结束，由于fgets会把回车（\\n）也读入，所以判断时就变成了“end\\n”</span><br><span class=\"line\">\tprintf(&quot;Input some text. Enter &apos;end&apos;to finish...\\n&quot;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tsem_wait(&amp;sem_add);</span><br><span class=\"line\">\twhile(strcmp(&quot;end\\n&quot;, msg) != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(strncmp(&quot;TEST&quot;, msg, 4) == 0)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tstrcpy(msg, &quot;copy_data\\n&quot;);</span><br><span class=\"line\">\t\t\tsem_post(&amp;sem);</span><br><span class=\"line\">\t\t\t//把sem_add的值减1，即等待子线程处理完成</span><br><span class=\"line\">\t\t\tsem_wait(&amp;sem_add);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfgets(msg, MSG_SIZE, stdin);</span><br><span class=\"line\">\t\t//把信号量加1</span><br><span class=\"line\">\t\tsem_post(&amp;sem);</span><br><span class=\"line\">\t\t//把sem_add的值减1，即等待子线程处理完成</span><br><span class=\"line\">\t\tsem_wait(&amp;sem_add);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">\tprintf(&quot;Waiting for thread to finish...\\n&quot;);</span><br><span class=\"line\">\t//等待子线程结束</span><br><span class=\"line\">\tres = pthread_join(thread, &amp;thread_result);</span><br><span class=\"line\">\tif(res != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(&quot;pthread_join failed\\n&quot;);</span><br><span class=\"line\">\t\texit(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;Thread joined\\n&quot;);</span><br><span class=\"line\">\t//清理信号量</span><br><span class=\"line\">\tsem_destroy(&amp;sem);</span><br><span class=\"line\">\tsem_destroy(&amp;sem_add);</span><br><span class=\"line\">\texit(EXIT_SUCCESS);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">void* thread_func(void *msg)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar *ptr = msg;</span><br><span class=\"line\">\t//把信号量减1</span><br><span class=\"line\">\tsem_wait(&amp;sem);</span><br><span class=\"line\">\twhile(strcmp(&quot;end\\n&quot;, msg) != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\t//把小写字母变成大写</span><br><span class=\"line\">\t\tfor(; ptr[i] != &apos;\\0&apos;; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tif(ptr[i] &gt;= &apos;a&apos; &amp;&amp; ptr[i] &lt;= &apos;z&apos;)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tptr[i] -= &apos;a&apos; - &apos;A&apos;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprintf(&quot;You input %d characters\\n&quot;, i-1);</span><br><span class=\"line\">\t\tprintf(&quot;To Uppercase: %s\\n&quot;, ptr);</span><br><span class=\"line\">\t\t//把信号量加1，表明子线程处理完成</span><br><span class=\"line\">\t\tsem_post(&amp;sem_add);</span><br><span class=\"line\">\t\t//把信号量减1</span><br><span class=\"line\">\t\tsem_wait(&amp;sem);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsem_post(&amp;sem_add);</span><br><span class=\"line\">\t//退出线程</span><br><span class=\"line\">\tpthread_exit(NULL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"std:move基本用法和理解","slug":"std-move基本用法和理解"},"next":{"title":"HTTP协议之Range、Content-Range","slug":"HTTP协议之Range、Content-Range"},"link":"http://yoursite.com/post/Linux多线程信号量同步线程/"}