{"title":"std:move基本用法和理解","date":"2019-06-22T16:20:50.000Z","slug":"std-move基本用法和理解","comments":true,"updated":"2019-06-22T16:26:14.552Z","content":"<h3 id=\"说明\">说明<a href=\"post/std-move基本用法和理解#说明\"></a></h3><p>std::move(t) 用来表明对象t 是可以moved from的,它允许高效的从t资源转换到lvalue上.<br>注意,标准库对象支持moved from的左值在moved 之后它的对象原值是有效的(可以正常析构),但是是unspecified的,可以理解为空数据,但是这个对象的其他方法返回值不一定是0,比如size().所以,moved from 之后的对象最好还是不要使用吧?(如有不正确理解,请告知)<br>对本身进行move,并赋值给本身是undefined的行为.</p>\n<p>std::move 的函数原型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> *  @brief  Convert a value to an rvalue.</span><br><span class=\"line\"> *  @param  __t  A thing of arbitrary type.</span><br><span class=\"line\"> *  @return The parameter cast to an rvalue-reference to allow moving it.</span><br><span class=\"line\">*/</span><br><span class=\"line\">template&lt;typename _Tp&gt;</span><br><span class=\"line\">  constexpr typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;</span><br><span class=\"line\">  move(_Tp&amp;&amp; __t) noexcept</span><br><span class=\"line\">  &#123; return static_cast&lt;typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp;&gt;(__t); &#125;</span><br></pre></td></tr></table></figure></p>\n<p>结构体 remove_reference 的原型,就是重载了多个结构体模板来获取原类型 type.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// remove_reference</span><br><span class=\"line\">template&lt;typename _Tp&gt;</span><br><span class=\"line\">  struct remove_reference</span><br><span class=\"line\">  &#123; typedef _Tp   type; &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">template&lt;typename _Tp&gt;</span><br><span class=\"line\">  struct remove_reference&lt;_Tp&amp;&gt;</span><br><span class=\"line\">  &#123; typedef _Tp   type; &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">template&lt;typename _Tp&gt;</span><br><span class=\"line\">  struct remove_reference&lt;_Tp&amp;&amp;&gt;</span><br><span class=\"line\">  &#123; typedef _Tp   type; &#125;;</span><br></pre></td></tr></table></figure></p>\n<p>以下用两个例子来说明std::move的用法:</p>\n<h5 id=\"例子1\">例子1<a href=\"post/std-move基本用法和理解#例子1\"></a></h5><p>原lvalue值被moved from之后值被转移,所以为空字符串.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void TestSTLObject()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::string str = &quot;Hello&quot;;</span><br><span class=\"line\">    std::vector&lt;std::string&gt; v;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // uses the push_back(const T&amp;) overload, which means</span><br><span class=\"line\">    // we&apos;ll incur the cost of copying str</span><br><span class=\"line\">    v.push_back(str);</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;After copy, str is \\&quot;&quot; &lt;&lt; str &lt;&lt; &quot;\\&quot;\\n&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // uses the rvalue reference push_back(T&amp;&amp;) overload,</span><br><span class=\"line\">    // which means no strings will be copied; instead, the contents</span><br><span class=\"line\">    // of str will be moved into the vector.  This is less</span><br><span class=\"line\">    // expensive, but also means str might now be empty.</span><br><span class=\"line\">    v.push_back(std::move(str));</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;After move, str is \\&quot;&quot; &lt;&lt; str &lt;&lt; &quot;\\&quot;\\n&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; &quot;The contents of the vector are \\&quot;&quot; &lt;&lt; v[0]</span><br><span class=\"line\">                                         &lt;&lt; &quot;\\&quot;, \\&quot;&quot; &lt;&lt; v[1] &lt;&lt; &quot;\\&quot;\\n&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">After copy, str is &quot;Hello&quot;</span><br><span class=\"line\">After move, str is &quot;&quot;</span><br><span class=\"line\">The contents of the vector are &quot;Hello&quot;, &quot;Hello&quot;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"例子2\">例子2<a href=\"post/std-move基本用法和理解#例子2\"></a></h5><p>自定义自己的类对象支持moved from 操作,需要实现 Move Constructors and Move Assignment Operators<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">#include &lt;utility&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">class MemoryBlock</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\"> </span><br><span class=\"line\">   // Simple constructor that initializes the resource.</span><br><span class=\"line\">   explicit MemoryBlock(size_t length)</span><br><span class=\"line\">      : _length(length)</span><br><span class=\"line\">      , _data(new int[length])</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      std::cout &lt;&lt; &quot;In MemoryBlock(size_t). length = &quot;</span><br><span class=\"line\">                &lt;&lt; _length &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   // Destructor.</span><br><span class=\"line\">   ~MemoryBlock()</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      std::cout &lt;&lt; &quot;In ~MemoryBlock(). length = &quot;</span><br><span class=\"line\">                &lt;&lt; _length &lt;&lt; &quot;.&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      if (_data != nullptr)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         std::cout &lt;&lt; &quot; Deleting resource.&quot;;</span><br><span class=\"line\">         // Delete the resource.</span><br><span class=\"line\">         delete[] _data;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      std::cout &lt;&lt; std::endl;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   // Copy constructor.</span><br><span class=\"line\">   MemoryBlock(const MemoryBlock&amp; other)</span><br><span class=\"line\">      : _length(other._length)</span><br><span class=\"line\">      , _data(new int[other._length])</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      std::cout &lt;&lt; &quot;In MemoryBlock(const MemoryBlock&amp;). length = &quot;</span><br><span class=\"line\">                &lt;&lt; other._length &lt;&lt; &quot;. Copying resource.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">      std::copy(other._data, other._data + _length, _data);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   // Copy assignment operator.</span><br><span class=\"line\">   MemoryBlock&amp; operator=(const MemoryBlock&amp; other)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      std::cout &lt;&lt; &quot;In operator=(const MemoryBlock&amp;). length = &quot;</span><br><span class=\"line\">                &lt;&lt; other._length &lt;&lt; &quot;. Copying resource.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">      if (this != &amp;other)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         // Free the existing resource.</span><br><span class=\"line\">         delete[] _data;</span><br><span class=\"line\"> </span><br><span class=\"line\">         _length = other._length;</span><br><span class=\"line\">         _data = new int[_length];</span><br><span class=\"line\">         std::copy(other._data, other._data + _length, _data);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return *this;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   // Retrieves the length of the data resource.</span><br><span class=\"line\">   size_t Length() const</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      return _length;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   // Move constructor.</span><br><span class=\"line\">    MemoryBlock(MemoryBlock&amp;&amp; other)</span><br><span class=\"line\">       : _data(nullptr)</span><br><span class=\"line\">       , _length(0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       std::cout &lt;&lt; &quot;In MemoryBlock(MemoryBlock&amp;&amp;). length = &quot;</span><br><span class=\"line\">             &lt;&lt; other._length &lt;&lt; &quot;. Moving resource.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">       // Copy the data pointer and its length from the</span><br><span class=\"line\">       // source object.</span><br><span class=\"line\">       _data = other._data;</span><br><span class=\"line\">       _length = other._length;</span><br><span class=\"line\"> </span><br><span class=\"line\">       // Release the data pointer from the source object so that</span><br><span class=\"line\">       // the destructor does not free the memory multiple times.</span><br><span class=\"line\">       other._data = nullptr;</span><br><span class=\"line\">       other._length = 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // Move assignment operator.</span><br><span class=\"line\">    MemoryBlock&amp; operator=(MemoryBlock&amp;&amp; other)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       std::cout &lt;&lt; &quot;In operator=(MemoryBlock&amp;&amp;). length = &quot;</span><br><span class=\"line\">                 &lt;&lt; other._length &lt;&lt; &quot;.&quot; &lt;&lt; std::endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">       if (this != &amp;other)</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">          // Free the existing resource.</span><br><span class=\"line\">          delete[] _data;</span><br><span class=\"line\"> </span><br><span class=\"line\">          // Copy the data pointer and its length from the</span><br><span class=\"line\">          // source object.</span><br><span class=\"line\">          _data = other._data;</span><br><span class=\"line\">          _length = other._length;</span><br><span class=\"line\"> </span><br><span class=\"line\">          // Release the data pointer from the source object so that</span><br><span class=\"line\">          // the destructor does not free the memory multiple times.</span><br><span class=\"line\">          other._data = nullptr;</span><br><span class=\"line\">          other._length = 0;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       return *this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">private:</span><br><span class=\"line\">   size_t _length; // The length of the resource.</span><br><span class=\"line\">   int* _data; // The resource.</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">void TestSTLObject()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    std::string str = &quot;Hello&quot;;</span><br><span class=\"line\">    std::vector&lt;std::string&gt; v;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // uses the push_back(const T&amp;) overload, which means</span><br><span class=\"line\">    // we&apos;ll incur the cost of copying str</span><br><span class=\"line\">    v.push_back(str);</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;After copy, str is \\&quot;&quot; &lt;&lt; str &lt;&lt; &quot;\\&quot;\\n&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    // uses the rvalue reference push_back(T&amp;&amp;) overload,</span><br><span class=\"line\">    // which means no strings will be copied; instead, the contents</span><br><span class=\"line\">    // of str will be moved into the vector.  This is less</span><br><span class=\"line\">    // expensive, but also means str might now be empty.</span><br><span class=\"line\">    v.push_back(std::move(str));</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;After move, str is \\&quot;&quot; &lt;&lt; str &lt;&lt; &quot;\\&quot;\\n&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">    std::cout &lt;&lt; &quot;The contents of the vector are \\&quot;&quot; &lt;&lt; v[0]</span><br><span class=\"line\">                                         &lt;&lt; &quot;\\&quot;, \\&quot;&quot; &lt;&lt; v[1] &lt;&lt; &quot;\\&quot;\\n&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void TestMyObjectWithoutUseMove()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   std::vector&lt;MemoryBlock&gt; v;</span><br><span class=\"line\">   MemoryBlock mb1(25);</span><br><span class=\"line\">   // MemoryBlock mb2(75);</span><br><span class=\"line\">   // MemoryBlock mb3(50);</span><br><span class=\"line\"> </span><br><span class=\"line\">   v.push_back(mb1);</span><br><span class=\"line\">   //v.push_back(mb2);</span><br><span class=\"line\">   //v.insert(v.begin() + 1, mb3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void TestMyObjectWithUseMove()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   std::vector&lt;MemoryBlock&gt; v;</span><br><span class=\"line\"> </span><br><span class=\"line\">   MemoryBlock mb1(25);</span><br><span class=\"line\">   // MemoryBlock mb2(75);</span><br><span class=\"line\">   // MemoryBlock mb3(50);</span><br><span class=\"line\"> </span><br><span class=\"line\">   v.push_back(std::move(mb1));</span><br><span class=\"line\">   //v.push_back(MemoryBlock(75));</span><br><span class=\"line\">   //v.insert(v.begin() + 1, MemoryBlock(50));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main(int argc, char const *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    //TestSTLObject();</span><br><span class=\"line\">    TestMyObjectWithoutUseMove();</span><br><span class=\"line\">    std::cout &lt;&lt; &quot;.......................................&quot; &lt;&lt; std::endl;</span><br><span class=\"line\">    TestMyObjectWithUseMove();</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In MemoryBlock(size_t). length = 25.</span><br><span class=\"line\">In MemoryBlock(const MemoryBlock&amp;). length = 25. Copying resource.</span><br><span class=\"line\">In ~MemoryBlock(). length = 25. Deleting resource.</span><br><span class=\"line\">In ~MemoryBlock(). length = 25. Deleting resource.</span><br><span class=\"line\">.......................................</span><br><span class=\"line\">In MemoryBlock(size_t). length = 25.</span><br><span class=\"line\">In MemoryBlock(MemoryBlock&amp;&amp;). length = 25. Moving resource.</span><br><span class=\"line\">In ~MemoryBlock(). length = 0.</span><br><span class=\"line\">In ~MemoryBlock(). length = 25. Deleting resource.</span><br></pre></td></tr></table></figure></p>\n","next":{"title":"Linux多线程信号量同步线程","slug":"Linux多线程信号量同步线程"},"link":"http://yoursite.com/post/std-move基本用法和理解/"}