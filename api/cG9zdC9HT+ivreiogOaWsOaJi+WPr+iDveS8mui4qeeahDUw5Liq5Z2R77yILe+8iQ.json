{"title":"GO语言新手可能会踩的50个坑（-）","date":"2019-05-11T04:56:48.000Z","slug":"GO语言新手可能会踩的50个坑（-）","comments":true,"updated":"2019-05-11T05:34:38.801Z","content":"<h4 id=\"1-左大括号-不能单独放一行\">1.左大括号{不能单独放一行<a href=\"post/GO语言新手可能会踩的50个坑（-）#1-左大括号-不能单独放一行\"></a></h4><p>在其他大多数语言中，{ 的位置你自行决定。Go 比较特别，遵守分号注入规则（automatic semicolon injection）：编译器会在每行代码尾部特定分隔符后加 ; 来分隔多条语句，比如会在 ) 后加分号：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例</span><br><span class=\"line\">func main()                    </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    println(&quot;hello world&quot;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 等效于</span><br><span class=\"line\">func main();    // 无函数体                    </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    println(&quot;hello world&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-未使用的变量\">2.未使用的变量<a href=\"post/GO语言新手可能会踩的50个坑（-）#2-未使用的变量\"></a></h4><p>如果在函数体代码中有未使用的变量，则无法通过编译，不过全局变量声明但不使用是可以的。<br>即使变量声明后为变量赋值，依旧无法通过编译，需在某处使用它：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例</span><br><span class=\"line\">var gvar int     // 全局变量，声明不使用也可以</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var one int     // error: one declared and not used</span><br><span class=\"line\">    two := 2    // error: two declared and not used</span><br><span class=\"line\">    var three int    // error: three declared and not used</span><br><span class=\"line\">    three = 3        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确示例</span><br><span class=\"line\">// 可以直接注释或移除未使用的变量</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var one int</span><br><span class=\"line\">    _ = one</span><br><span class=\"line\">    two := 2</span><br><span class=\"line\">    println(two)</span><br><span class=\"line\">    </span><br><span class=\"line\">    var three int</span><br><span class=\"line\">    one = three</span><br><span class=\"line\"></span><br><span class=\"line\">    var four int</span><br><span class=\"line\">    four = four</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-未使用的import\">3.未使用的import<a href=\"post/GO语言新手可能会踩的50个坑（-）#3-未使用的import\"></a></h4><p>如果你 import 一个包，但包中的变量、函数、接口和结构体一个都没有用到的话，将编译失败。<br>可以使用 _ 下划线符号作为别名来忽略导入的包，从而避免编译错误，这只会执行 package 的 init()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例</span><br><span class=\"line\">import (</span><br><span class=\"line\">    &quot;fmt&quot;    // imported and not used: &quot;fmt&quot;</span><br><span class=\"line\">    &quot;log&quot;    // imported and not used: &quot;log&quot;</span><br><span class=\"line\">    &quot;time&quot;    // imported and not used: &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确示例</span><br><span class=\"line\">// 可以使用 goimports 工具来注释或移除未使用到的包</span><br><span class=\"line\">import (</span><br><span class=\"line\">    _ &quot;fmt&quot;</span><br><span class=\"line\">    &quot;log&quot;</span><br><span class=\"line\">    &quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    _ = log.Println</span><br><span class=\"line\">    _ = time.Now</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-简短声明的变量只能在函数内部使用\">4.简短声明的变量只能在函数内部使用<a href=\"post/GO语言新手可能会踩的50个坑（-）#4-简短声明的变量只能在函数内部使用\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例</span><br><span class=\"line\">myvar := 1    // syntax error: non-declaration statement outside function body</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确示例</span><br><span class=\"line\">var  myvar = 1</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-使用简短声明来重复声明变量\">5.使用简短声明来重复声明变量<a href=\"post/GO语言新手可能会踩的50个坑（-）#5-使用简短声明来重复声明变量\"></a></h4><p>不能用简短声明方式来单独为一个变量重复声明，:= 左侧至少有一个新变量，才允许多变量的重复声明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例</span><br><span class=\"line\">func main() &#123;  </span><br><span class=\"line\">    one := 0</span><br><span class=\"line\">    one := 1 // error: no new variables on left side of :=</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确示例</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    one := 0</span><br><span class=\"line\">    one, two := 1, 2    // two 是新变量，允许 one 的重复声明。比如 error 处理经常用同名变量 err</span><br><span class=\"line\">    one, two = two, one    // 交换两个变量值的简写</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"6-不能使用简短声明来设置字段的值\">6.不能使用简短声明来设置字段的值<a href=\"post/GO语言新手可能会踩的50个坑（-）#6-不能使用简短声明来设置字段的值\"></a></h4><p>struct 的变量字段不能使用 := 来赋值以使用预定义的变量来避免解决：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例</span><br><span class=\"line\">type info struct &#123;</span><br><span class=\"line\">    result int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func work() (int, error) &#123;</span><br><span class=\"line\">    return 3, nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var data info</span><br><span class=\"line\">    data.result, err := work()    // error: non-name data.result on left side of :=</span><br><span class=\"line\">    fmt.Printf(&quot;info: %+v\\n&quot;, data)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确示例</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var data info</span><br><span class=\"line\">    var err error    // err 需要预声明</span><br><span class=\"line\"></span><br><span class=\"line\">    data.result, err = work()</span><br><span class=\"line\">    if err != nil &#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">        return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Printf(&quot;info: %+v\\n&quot;, data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"7-不小心覆盖了变量\">7.不小心覆盖了变量<a href=\"post/GO语言新手可能会踩的50个坑（-）#7-不小心覆盖了变量\"></a></h4><p>对从动态语言转过来的开发者来说，简短声明很好用，这可能会让人误会 := 是一个赋值操作符。<br>如果你在新的代码块中像下边这样误用了 :=，编译不会报错，但是变量不会按你的预期工作：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    x := 1</span><br><span class=\"line\">    println(x)        // 1</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        println(x)    // 1</span><br><span class=\"line\">        x := 2</span><br><span class=\"line\">        println(x)    // 2    // 新的 x 变量的作用域只在代码块内部</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    println(x)        // 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"8-显式类型的变量无法使用-nil-来初始化\">8.显式类型的变量无法使用 nil 来初始化<a href=\"post/GO语言新手可能会踩的50个坑（-）#8-显式类型的变量无法使用-nil-来初始化\"></a></h4><p>nil 是 interface、function、pointer、map、slice 和 channel 类型变量的默认初始值。但声明时不指定类型，编译器也无法推断出变量的具体类型。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var x = nil    // error: use of untyped nil</span><br><span class=\"line\">    _ = x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 正确示例</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var x interface&#123;&#125; = nil</span><br><span class=\"line\">    _ = x</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"9-直接使用值为-nil-的-slice、map\">9.直接使用值为 nil 的 slice、map<a href=\"post/GO语言新手可能会踩的50个坑（-）#9-直接使用值为-nil-的-slice、map\"></a></h4><p>允许对值为 nil 的 slice 添加元素，但对值为 nil 的 map 添加元素则会造成运行时 panic<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// map 错误示例</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var m map[string]int</span><br><span class=\"line\">    m[&quot;one&quot;] = 1        // error: panic: assignment to entry in nil map</span><br><span class=\"line\">    // m := make(map[string]int)// map 的正确声明，分配了实际的内存</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// slice 正确示例</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    var s []int</span><br><span class=\"line\">    s = append(s, 1)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"10-map容量\">10.map容量<a href=\"post/GO语言新手可能会踩的50个坑（-）#10-map容量\"></a></h4><p>在创建 map 类型的变量时可以指定容量，但不能像 slice 一样使用 cap() 来检测分配空间的大小：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 错误示例</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">    m := make(map[string]int, 99)</span><br><span class=\"line\">    println(cap(m))     // error: invalid argument m1 (type map[string]int) for cap  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","next":{"title":"Golang中method has pointer receiver异常","slug":"Golang中method-has-pointer-receiver异常"},"link":"http://yoursite.com/post/GO语言新手可能会踩的50个坑（-）/"}