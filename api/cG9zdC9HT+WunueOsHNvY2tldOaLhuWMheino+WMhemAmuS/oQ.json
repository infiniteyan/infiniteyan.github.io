{"title":"GO实现socket拆包解包通信","date":"2019-04-20T15:16:59.000Z","slug":"GO实现socket拆包解包通信","comments":true,"updated":"2019-04-20T15:20:45.443Z","content":"<p>实现一个服务端客户端socket通信demo，通信内容在传输过程中进行拆包解包。</p>\n<p>server.go<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"ServerClient/protocol\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">func <span class=\"title\">CheckError</span><span class=\"params\">(err error)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">log</span>.Println(err)</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func Printer(channel chan []byte) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tselect &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> data := &lt;- channel:</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">log</span>.Println(<span class=\"string\">\"#########recv:\"</span>, <span class=\"built_in\">string</span>(data))</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func handleConnection(connection net.Conn) &#123;</span><br><span class=\"line\">\tdefer connection.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\tdataChannel := make(chan []byte, <span class=\"number\">26</span>)</span><br><span class=\"line\">\tgo Printer(dataChannel)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\ttotalbuffer := make([]byte, <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\ttempBuffer := make([]byte, <span class=\"number\">24</span>)</span><br><span class=\"line\">\t\tlen, err := connection.Read(tempBuffer)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">log</span>.Println(connection.RemoteAddr().String(), <span class=\"string\">\" connection error: \"</span>, err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">\"read data len:%d\\n\"</span>, len)</span><br><span class=\"line\">\t\ttotalbuffer = protocol.Depack(append(totalbuffer, tempBuffer[:len]...), dataChannel)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tlistener, err := net.Listen(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"localhost:1024\"</span>)</span><br><span class=\"line\">\tCheckError(err)</span><br><span class=\"line\">\tdefer listener.Close()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">log</span>.Println(<span class=\"string\">\"waiting for clients to connect...\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tconn, err := listener.Accept()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"built_in\">log</span>.Println(conn.RemoteAddr().String(), <span class=\"string\">\" tcp connect success.\"</span>)</span><br><span class=\"line\">\t\tgo handleConnection(conn)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>client.go<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"ServerClient/protocol\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"log\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type SendStruct <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tId\t\t\t<span class=\"built_in\">string</span> \t`json:<span class=\"string\">\"id\"</span>`</span><br><span class=\"line\">\tSession \t<span class=\"built_in\">string</span> \t`json:<span class=\"string\">\"session\"</span>`</span><br><span class=\"line\">\tMeta \t\t<span class=\"built_in\">string</span> \t`json:<span class=\"string\">\"meta\"</span>`</span><br><span class=\"line\">\tContent \t<span class=\"built_in\">string</span> \t`json:<span class=\"string\">\"content\"</span>`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">func <span class=\"title\">CheckError</span><span class=\"params\">(err error)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != nil &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">log</span>.Println(err)</span><br><span class=\"line\">\t\tpanic(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tconn, err := net.Dial(<span class=\"string\">\"tcp\"</span>, <span class=\"string\">\"127.0.0.1:1024\"</span>)</span><br><span class=\"line\">\tCheckError(err)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">\t\tsession := protocol.GenerateSession()</span><br><span class=\"line\">\t\tsendStruct := SendStruct&#123;</span><br><span class=\"line\">\t\t\tId: strconv.Itoa(i),</span><br><span class=\"line\">\t\t\tSession: session + <span class=\"string\">\"2019\"</span>,</span><br><span class=\"line\">\t\t\tMeta: <span class=\"string\">\"golang\"</span>,</span><br><span class=\"line\">\t\t\tContent: <span class=\"string\">\"messsage\"</span>,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsendMsg, err := json.Marshal(sendStruct)</span><br><span class=\"line\">\t\t<span class=\"built_in\">log</span>.Println(<span class=\"built_in\">string</span>(protocol.Enpack(sendMsg)))</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t_, err = conn.Write(protocol.Enpack(sendMsg))</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (err != nil) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">log</span>.Println(<span class=\"string\">\"send error :\"</span>, err)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttime.Sleep(time.Millisecond * <span class=\"number\">150</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>protocol.go<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package protocol</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"bytes\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/binary\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"strconv\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> CONST_HEADER <span class=\"built_in\">string</span> = <span class=\"string\">\"HEADERS\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tCONST_HEADER_LEN = <span class=\"number\">7</span></span><br><span class=\"line\">\tCONST_M_LEN = <span class=\"number\">4</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func IntToBytes(n <span class=\"keyword\">int</span>) []byte &#123;</span><br><span class=\"line\">\ti := int32(n)</span><br><span class=\"line\">\tbuffer := bytes.NewBuffer([]byte&#123;&#125;)</span><br><span class=\"line\">\tbinary.Write(buffer, binary.BigEndian, i)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> buffer.Bytes()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func BytesToInt(b []byte) <span class=\"keyword\">int</span> &#123;</span><br><span class=\"line\">\tbuffer := bytes.NewBuffer(b)</span><br><span class=\"line\">\tvar x int32</span><br><span class=\"line\">\tbinary.Read(buffer, binary.BigEndian, &amp;x)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">int</span>(x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func GenerateSession() <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">\ttimeStamp := time.Now().Unix()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strconv.FormatInt(timeStamp, <span class=\"number\">10</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func Enpack(msg []byte) []byte &#123;</span><br><span class=\"line\">\tret := []byte(CONST_HEADER)</span><br><span class=\"line\">\tret = append(ret, IntToBytes(len(msg))...)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> append(ret, msg...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func Depack(inBuffer []byte, channel chan []byte) []byte &#123;</span><br><span class=\"line\">\tlen := len(inBuffer)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> len &lt; CONST_HEADER_LEN + CONST_M_LEN &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> inBuffer</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttargetLen := BytesToInt(inBuffer[CONST_HEADER_LEN:CONST_HEADER_LEN + CONST_M_LEN])</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> len &lt; targetLen + CONST_HEADER_LEN + CONST_M_LEN &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> inBuffer</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret := inBuffer[CONST_HEADER_LEN + CONST_M_LEN : CONST_HEADER_LEN + CONST_M_LEN + targetLen]</span><br><span class=\"line\">\tchannel &lt;- ret</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> inBuffer[CONST_HEADER_LEN + CONST_M_LEN + targetLen:]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"WebSocket协议详解","slug":"WebSocket协议详解"},"next":{"title":"GO使用Consul实现服务发现","slug":"GO使用Consul实现服务发现"},"link":"http://yoursite.com/post/GO实现socket拆包解包通信/"}