{"title":"GO语言RPC之gRPC","date":"2019-04-07T07:48:18.000Z","slug":"GO语言RPC之gRPC","comments":true,"updated":"2019-04-07T07:53:56.012Z","content":"<h3 id=\"gRPC简介\">gRPC简介<a href=\"post/GO语言RPC之gRPC#gRPC简介\"></a></h3><p>gRPC 是一款高性能、开源的 RPC 框架，产自 Google，基于 ProtoBuf 序列化协议进行开发，支持多种语言（Golang、Python、Java等），本篇只介绍 Golang 的 gRPC 使用。因为 gRPC 对 HTTP/2 协议的支持使其在 Android、IOS 等客户端后端服务的开发领域具有良好的前景。gRPC 提供了一种简单的方法来定义服务，同时客户端可以充分利用 HTTP/2 stream 的特性，从而有助于节省带宽、降低 TCP 的连接次数、节省CPU的使用等。</p>\n<h3 id=\"实践\">实践<a href=\"post/GO语言RPC之gRPC#实践\"></a></h3><p>下面我们使用gRPC定义一个接口，该接口实现对传入的数据进行大写的格式化处理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = &quot;proto3&quot;;</span><br><span class=\"line\">package example;</span><br><span class=\"line\">service FormatData &#123;</span><br><span class=\"line\">    rpc DoFormat(Data) returns (Data)&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">message Data &#123;</span><br><span class=\"line\">    string text = 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>1.编译protobuf：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=plugins=grpc:. data.proto</span><br></pre></td></tr></table></figure></p>\n<p>2.实现server端<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;golang.org/x/net/context&quot;</span><br><span class=\"line\">\t&quot;google.golang.org/grpc&quot;</span><br><span class=\"line\">\t&quot;google.golang.org/grpc/reflection&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net&quot;</span><br><span class=\"line\">\t&quot;rpc_demo/example&quot;</span><br><span class=\"line\">\t&quot;strings&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">const (</span><br><span class=\"line\">\tHOST string = &quot;localhost&quot;</span><br><span class=\"line\">\tPORT string = &quot;8080&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type FormatData struct&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (fd *FormatData) DoFormat(ctx context.Context, in *example.Data) (out *example.Data, err error) &#123;</span><br><span class=\"line\">\tstr := in.Text</span><br><span class=\"line\">\to := &amp;example.Data&#123;Text: strings.ToUpper(str)&#125;</span><br><span class=\"line\">\treturn o, nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tlistener, err := net.Listen(&quot;tcp&quot;, HOST+&quot;:&quot;+PORT)</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(&quot;fail listen at : &quot; + HOST + &quot;:&quot; + PORT)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tlog.Println(&quot;Demo server is listening at : &quot; + HOST + &quot;:&quot; + PORT)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\trpcServer := grpc.NewServer()</span><br><span class=\"line\">\texample.RegisterFormatDataServer(rpcServer, &amp;FormatData&#123;&#125;)</span><br><span class=\"line\">\treflection.Register(rpcServer)</span><br><span class=\"line\">\tif err = rpcServer.Serve(listener); err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(&quot;fail serve at : &quot; + HOST + &quot;:&quot; + PORT)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.实现client端：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;golang.org/x/net/context&quot;</span><br><span class=\"line\">\t&quot;google.golang.org/grpc&quot;</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;rpc_demo/example&quot;</span><br><span class=\"line\">\t&quot;time&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">const (</span><br><span class=\"line\">\tADDERSS string = &quot;localhost:8080&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tconn, err := grpc.Dial(ADDERSS, grpc.WithInsecure())</span><br><span class=\"line\">\tif err != nil &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(&quot;Can&apos;t connect: &quot; + ADDERSS)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tdefer conn.Close()</span><br><span class=\"line\">\tclient := example.NewFormatDataClient(conn)</span><br><span class=\"line\">\tfor j := 0; j &lt; 8; j++ &#123;</span><br><span class=\"line\">\t\tresp, err := client.DoFormat(context.Background(), &amp;example.Data&#123;Text: &quot;hello, World&quot;&#125;)</span><br><span class=\"line\">\t\tif err != nil &#123;</span><br><span class=\"line\">\t\t\tlog.Fatalln(&quot;Do Format error:&quot;, err.Error())</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlog.Println(resp.Text)</span><br><span class=\"line\">\t\ttime.Sleep(1 * time.Second)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","prev":{"title":"GO实现简单聊天室","slug":"GO实现简单聊天室"},"next":{"title":"GO实现协程池","slug":"GO实现协程池"},"link":"http://yoursite.com/post/GO语言RPC之gRPC/"}