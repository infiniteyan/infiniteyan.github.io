{"title":"GO语言RESTful API的简单实现","date":"2019-04-21T13:00:55.000Z","slug":"GO语言RESTful-API的简单实现","comments":true,"updated":"2019-04-21T13:05:11.203Z","content":"<h4 id=\"何为RESTful-API\">何为RESTful API<a href=\"post/GO语言RESTful-API的简单实现#何为RESTful-API\"></a></h4><p>A RESTful API is an application program interface (API) that uses HTTP requests to GET, PUT, POST and DELETE data.</p>\n<p>A RESTful API – also referred to as a RESTful web service – is based on representational state transfer (REST) technology, an architectural style and approach to communications often used in web services development.</p>\n<p>Wikipedia: 表征性状态传输（英文：Representational State Transfer，简称REST）是Roy Fielding博士于2000年在他的博士论文中提出来的一种软件架构风格。<br>Roy Fielding是HTTP协议（1.0版和1.1版）的主要设计者，事实上HTTP 1.1规范正是基于REST架构风格的指导原理来设计的。需要注意的是，REST是一种设计风格而不是标准，如果一个架构符合REST原则，我们就称它为RESTful架构。</p>\n<p>golang自带的http.SeverMux路由实现简单,本质是一个map[string]Handler, 是请求路径与该路径对应的处理函数的映射关系。实现简单功能也比较单一：<br>1.不支持正则路由， 这个是比较致命的<br>2.不支持按照Method，header，host等信息匹配，所以也就没法实现RESTful架构<br>只能借助gorilla来实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">\"github.com/gorilla/mux\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"encoding/json\"</span></span><br><span class=\"line\">\t<span class=\"string\">\"net/http\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Address <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tCity \t\t<span class=\"built_in\">string</span> `json:<span class=\"string\">\"city,omitempty\"</span>`</span><br><span class=\"line\">\tProvince\t<span class=\"built_in\">string</span> `json:<span class=\"string\">\"province,omitempty\"</span>`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Person <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tId \t\t\t<span class=\"built_in\">string</span> `json:<span class=\"string\">\"id,omitempty\"</span>`</span><br><span class=\"line\">\tFirstname \t<span class=\"built_in\">string</span> `json:<span class=\"string\">\"firstname,omitempty\"</span>`</span><br><span class=\"line\">\tLastname\t<span class=\"built_in\">string</span> `json:<span class=\"string\">\"lastname,omitempty\"</span>`</span><br><span class=\"line\">\tAddress\t\t*Address `json:<span class=\"string\">\"address,omitempty\"</span>`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type Result <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tCode <span class=\"keyword\">int</span>\t\t`json:<span class=\"string\">\"code\"</span>`</span><br><span class=\"line\">\tMsg  <span class=\"built_in\">string</span>\t\t`json:<span class=\"string\">\"msg\"</span>`</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var persons []Person</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">func <span class=\"title\">GetPersons</span><span class=\"params\">(writer http.ResponseWriter, req *http.Request)</span> </span>&#123;</span><br><span class=\"line\">\twriter.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tjson.NewEncoder(writer).Encode(persons)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">func <span class=\"title\">GetPerson</span><span class=\"params\">(writer http.ResponseWriter, req *http.Request)</span> </span>&#123;</span><br><span class=\"line\">\twriter.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tparams := mux.Vars(req)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, p := range persons &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.Id == params[<span class=\"string\">\"id\"</span>] &#123;</span><br><span class=\"line\">\t\t\tjson.NewEncoder(writer).Encode(p)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tret := Result&#123;Code: <span class=\"number\">-1</span>, Msg: <span class=\"string\">\"failed to get\"</span>&#125;</span><br><span class=\"line\">\tjson.NewEncoder(writer).Encode(ret)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func DeletePerson(writer http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">\twriter.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tparams := mux.Vars(req)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, p := range persons &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.Id == params[<span class=\"string\">\"id\"</span>] &#123;</span><br><span class=\"line\">\t\t\tpersons = append(persons[:index], persons[index + <span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t\tret := Result&#123;Code: <span class=\"number\">0</span>, Msg: <span class=\"string\">\"success\"</span>&#125;</span><br><span class=\"line\">\t\t\tjson.NewEncoder(writer).Encode(ret)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tret := Result&#123;Code: <span class=\"number\">-1</span>, Msg: <span class=\"string\">\"failed\"</span>&#125;</span><br><span class=\"line\">\tjson.NewEncoder(writer).Encode(ret)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func PostPerson(writer http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">\twriter.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tparams := mux.Vars(req)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, p := range persons &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.Id == params[<span class=\"string\">\"id\"</span>] &#123;</span><br><span class=\"line\">\t\t\tret := Result&#123;Code: <span class=\"number\">-1</span>, Msg: <span class=\"string\">\"already exist\"</span>&#125;</span><br><span class=\"line\">\t\t\tjson.NewEncoder(writer).Encode(ret)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar newPerson Person</span><br><span class=\"line\">\tjson.NewDecoder(req.Body).Decode(&amp;newPerson)</span><br><span class=\"line\">\tnewPerson.Id = params[<span class=\"string\">\"id\"</span>]</span><br><span class=\"line\">\tpersons = append(persons, newPerson)</span><br><span class=\"line\">\tret := Result&#123;Code: <span class=\"number\">0</span>, Msg: <span class=\"string\">\"success\"</span>&#125;</span><br><span class=\"line\">\tjson.NewEncoder(writer).Encode(ret)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func PutPerson(writer http.ResponseWriter, req *http.Request) &#123;</span><br><span class=\"line\">\twriter.Header().Set(<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"application/json\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tparams := mux.Vars(req)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> index, p := range persons &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p.Id == params[<span class=\"string\">\"id\"</span>] &#123;</span><br><span class=\"line\">\t\t\tpersons = append(persons[:index], persons[index+<span class=\"number\">1</span>:]...)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tvar newPerson Person</span><br><span class=\"line\">\tjson.NewDecoder(req.Body).Decode(&amp;newPerson)</span><br><span class=\"line\">\tnewPerson.Id = params[<span class=\"string\">\"id\"</span>]</span><br><span class=\"line\">\tpersons = append(persons, newPerson)</span><br><span class=\"line\">\tret := Result&#123;Code: <span class=\"number\">0</span>, Msg: <span class=\"string\">\"success\"</span>&#125;</span><br><span class=\"line\">\tjson.NewEncoder(writer).Encode(ret)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tpersons = append(persons, Person&#123;Id: <span class=\"string\">\"1\"</span>, Firstname: <span class=\"string\">\"xiao\"</span>, Lastname: <span class=\"string\">\"ming\"</span>, Address: &amp;Address&#123;City: <span class=\"string\">\"nanjing\"</span>, Province: <span class=\"string\">\"jiangsu\"</span>&#125;&#125;)</span><br><span class=\"line\">\tpersons = append(persons, Person&#123;Id: <span class=\"string\">\"2\"</span>, Firstname: <span class=\"string\">\"li\"</span>, Lastname: <span class=\"string\">\"xiansheng\"</span>, Address: &amp;Address&#123;City: <span class=\"string\">\"hangzhou\"</span>, Province: <span class=\"string\">\"zhejiang\"</span>&#125;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter := mux.NewRouter()</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/people\"</span>, GetPersons).Methods(<span class=\"string\">\"GET\"</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/people/&#123;id&#125;\"</span>, GetPerson).Methods(<span class=\"string\">\"GET\"</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/people/&#123;id&#125;\"</span>, PostPerson).Methods(<span class=\"string\">\"POST\"</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/people/&#123;id&#125;\"</span>, PutPerson).Methods(<span class=\"string\">\"PUT\"</span>)</span><br><span class=\"line\">\trouter.HandleFunc(<span class=\"string\">\"/people/&#123;id&#125;\"</span>, DeletePerson).Methods(<span class=\"string\">\"DELETE\"</span>)</span><br><span class=\"line\">\thttp.ListenAndServe(<span class=\"string\">\":12345\"</span>, router)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","next":{"title":"GO实现WebSocket消息推送","slug":"GO实现WebSocket消息推送"},"link":"http://yoursite.com/post/GO语言RESTful-API的简单实现/"}