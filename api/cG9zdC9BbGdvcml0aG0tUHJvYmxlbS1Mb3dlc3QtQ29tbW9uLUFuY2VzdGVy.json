{"title":"Algorithm Problem : Lowest Common Ancester","date":"2019-03-08T06:17:20.000Z","slug":"Algorithm-Problem-Lowest-Common-Ancester","comments":true,"updated":"2019-03-08T06:20:18.637Z","content":"<h3 id=\"问题描述\">问题描述<a href=\"post/Algorithm-Problem-Lowest-Common-Ancester#问题描述\"></a></h3><p>求取二叉树中两个节点的最小公共祖先节点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BinaryNode</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> m_value;</span><br><span class=\"line\">    BinaryNode* m_left;</span><br><span class=\"line\">    BinaryNode* m_right;</span><br><span class=\"line\"></span><br><span class=\"line\">    BinaryNode(<span class=\"keyword\">int</span> v, BinaryNode* left, BinaryNode* right)</span><br><span class=\"line\">            : m_value(v), m_left(left), m_right(right) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BinaryTree</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    BinaryTree() : m_root(<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~BinaryTree() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">findCommonAncester</span><span class=\"params\">(<span class=\"keyword\">int</span> v1, <span class=\"keyword\">int</span> v2, <span class=\"keyword\">int</span>&amp; ances)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v1Path;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v2Path;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> foundV1 = findValue(m_root, v1, v1Path);</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> foundV2 = findValue(m_root, v2, v2Path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (foundV1 &amp;&amp; foundV2) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">size_t</span> loopLen = v1Path.size() &lt; v2Path.size() ? v1Path.size() : v2Path.size();</span><br><span class=\"line\">            <span class=\"keyword\">size_t</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; loopLen) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1Path[i] == v2Path[i]) &#123;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ances = v1Path[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insertNode</span><span class=\"params\">(<span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        internalInsert(m_root, v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">findValue</span><span class=\"params\">(BinaryNode* node, <span class=\"keyword\">int</span> val, <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; <span class=\"built_in\">vector</span>)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == node) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>.push_back(node-&gt;m_value);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node-&gt;m_value == val) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> leftFound = findValue(node-&gt;m_left, val, <span class=\"built_in\">vector</span>);</span><br><span class=\"line\">        <span class=\"keyword\">bool</span> rightFound = findValue(node-&gt;m_right, val, <span class=\"built_in\">vector</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftFound || rightFound) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">vector</span>.pop_back();</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">internalInsert</span><span class=\"params\">(BinaryNode*&amp; node, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == node) &#123;</span><br><span class=\"line\">            node = <span class=\"keyword\">new</span> BinaryNode(v, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == node-&gt;m_value) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (v &gt; node-&gt;m_value) &#123;</span><br><span class=\"line\">            internalInsert(node-&gt;m_right, v);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            internalInsert(node-&gt;m_left, v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    BinaryNode* m_root;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    BinaryTree tree;</span><br><span class=\"line\">    tree.insertNode(<span class=\"number\">20</span>);</span><br><span class=\"line\">    tree.insertNode(<span class=\"number\">14</span>);</span><br><span class=\"line\">    tree.insertNode(<span class=\"number\">7</span>);</span><br><span class=\"line\">    tree.insertNode(<span class=\"number\">18</span>);</span><br><span class=\"line\">    tree.insertNode(<span class=\"number\">28</span>);</span><br><span class=\"line\">    tree.insertNode(<span class=\"number\">27</span>);</span><br><span class=\"line\">    tree.insertNode(<span class=\"number\">23</span>);</span><br><span class=\"line\">    tree.insertNode(<span class=\"number\">24</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> found = tree.findCommonAncester(<span class=\"number\">7</span>, <span class=\"number\">27</span>, ret);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (found) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"Lowest common ancester is : \"</span> &lt;&lt; ret &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Lowest common ancester is : 20</span><br></pre></td></tr></table></figure>","next":{"title":"Algorithm Problem : 计算符号组合","slug":"Algorithm-Problem-计算符号组合"},"link":"http://yoursite.com/post/Algorithm-Problem-Lowest-Common-Ancester/"}