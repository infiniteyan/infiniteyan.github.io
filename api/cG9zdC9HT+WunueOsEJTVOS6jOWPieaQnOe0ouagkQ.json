{"title":"GO实现BST二叉搜索树","date":"2019-06-25T09:16:43.000Z","slug":"GO实现BST二叉搜索树","comments":true,"updated":"2019-06-25T09:19:19.459Z","content":"<p>node.go<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">type Node struct &#123;</span><br><span class=\"line\">\tdata \t\tint</span><br><span class=\"line\">\tparent \t\t*Node</span><br><span class=\"line\">\tleftChild \t*Node</span><br><span class=\"line\">\trightChild \t*Node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewNode(d int) *Node &#123;</span><br><span class=\"line\">\treturn &amp;Node&#123;</span><br><span class=\"line\">\t\tdata: d,</span><br><span class=\"line\">\t\tparent: nil,</span><br><span class=\"line\">\t\tleftChild: nil,</span><br><span class=\"line\">\t\trightChild: nil,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *Node) AddNode(d int) &#123;</span><br><span class=\"line\">\tif d &lt; n.data &#123;</span><br><span class=\"line\">\t\tif n.leftChild == nil &#123;</span><br><span class=\"line\">\t\t\tn.leftChild = &amp;Node&#123;</span><br><span class=\"line\">\t\t\t\tdata: d,</span><br><span class=\"line\">\t\t\t\tparent: n,</span><br><span class=\"line\">\t\t\t\tleftChild: nil,</span><br><span class=\"line\">\t\t\t\trightChild: nil,</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tn.leftChild.AddNode(d)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; else if d &gt; n.data &#123;</span><br><span class=\"line\">\t\tif n.rightChild == nil &#123;</span><br><span class=\"line\">\t\t\tn.rightChild = &amp;Node&#123;</span><br><span class=\"line\">\t\t\t\tdata: d,</span><br><span class=\"line\">\t\t\t\tparent: n,</span><br><span class=\"line\">\t\t\t\tleftChild: nil,</span><br><span class=\"line\">\t\t\t\trightChild: nil,</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tn.rightChild.AddNode(d)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *Node) FindNode(d int) *Node &#123;</span><br><span class=\"line\">\tif d == n.data &#123;</span><br><span class=\"line\">\t\treturn n</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif d &lt; n.data &amp;&amp; n.leftChild != nil &#123;</span><br><span class=\"line\">\t\treturn n.leftChild.FindNode(d)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif d &gt; n.data &amp;&amp; n.rightChild != nil &#123;</span><br><span class=\"line\">\t\treturn n.rightChild.FindNode(d)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *Node) FindMin() *Node &#123;</span><br><span class=\"line\">\tptr := n</span><br><span class=\"line\">\tfor ptr.leftChild != nil &#123;</span><br><span class=\"line\">\t\tptr = ptr.leftChild</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ptr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *Node) FindMax() *Node &#123;</span><br><span class=\"line\">\tptr := n</span><br><span class=\"line\">\tfor ptr.rightChild != nil &#123;</span><br><span class=\"line\">\t\tptr = ptr.rightChild</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn ptr</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *Node) deleteSelfNode() &#123;</span><br><span class=\"line\">\tif n.leftChild != nil &amp;&amp; n.rightChild != nil &#123;</span><br><span class=\"line\">\t\tmaxNode := n.leftChild.FindMax()</span><br><span class=\"line\">\t\tn.data = maxNode.data</span><br><span class=\"line\">\t\tmaxNode.deleteSelfNode()</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tif n.leftChild == nil &#123;</span><br><span class=\"line\">\t\t\tif n.parent.leftChild == n &#123;</span><br><span class=\"line\">\t\t\t\tn.parent.leftChild = n.rightChild</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tn.parent.rightChild = n.rightChild</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif n.rightChild != nil &#123;</span><br><span class=\"line\">\t\t\t\tn.rightChild.parent = n.parent</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tif n.parent.leftChild == n &#123;</span><br><span class=\"line\">\t\t\t\tn.parent.leftChild = n.leftChild</span><br><span class=\"line\">\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\tn.parent.rightChild = n.leftChild</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tn.leftChild.parent = n.parent</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *Node) traversalByPreOrder() &#123;</span><br><span class=\"line\">\tfmt.Println(n.data, &quot; &quot;)</span><br><span class=\"line\">\tif n.leftChild != nil &#123;</span><br><span class=\"line\">\t\tn.leftChild.traversalByPreOrder()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif n.rightChild != nil &#123;</span><br><span class=\"line\">\t\tn.rightChild.traversalByPreOrder()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *Node) traversalByInOrder() &#123;</span><br><span class=\"line\">\tif n.leftChild != nil &#123;</span><br><span class=\"line\">\t\tn.leftChild.traversalByPreOrder()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(n.data)</span><br><span class=\"line\">\tif n.rightChild != nil &#123;</span><br><span class=\"line\">\t\tn.rightChild.traversalByPreOrder()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (n *Node) traversalByPostOrder() &#123;</span><br><span class=\"line\">\tif n.leftChild != nil &#123;</span><br><span class=\"line\">\t\tn.leftChild.traversalByPreOrder()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif n.rightChild != nil &#123;</span><br><span class=\"line\">\t\tn.rightChild.traversalByPreOrder()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(n.data)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>bsttree.go<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">type BstTree struct &#123;</span><br><span class=\"line\">\troot *Node</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func NewBstTree() *BstTree &#123;</span><br><span class=\"line\">\treturn &amp;BstTree&#123;</span><br><span class=\"line\">\t\troot:nil,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (tree *BstTree) IsEmpty() bool &#123;</span><br><span class=\"line\">\treturn tree.root == nil</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (tree *BstTree) InsertNode(d int) &#123;</span><br><span class=\"line\">\tif tree.IsEmpty() &#123;</span><br><span class=\"line\">\t\ttree.root = NewNode(d)</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\ttree.root.AddNode(d)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (tree *BstTree) DeleteNode(d int) bool &#123;</span><br><span class=\"line\">\tif tree.IsEmpty() &#123;</span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttargetNode := tree.root.FindNode(d)</span><br><span class=\"line\">\tif targetNode == nil &#123;</span><br><span class=\"line\">\t\treturn false</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tif targetNode == tree.root &#123;</span><br><span class=\"line\">\t\tif targetNode.leftChild != nil &amp;&amp; targetNode.rightChild != nil &#123;</span><br><span class=\"line\">\t\t\ttargetNode.deleteSelfNode()</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\tif targetNode.leftChild == nil &amp;&amp; targetNode.rightChild == nil &#123;</span><br><span class=\"line\">\t\t\t\ttree.root = nil</span><br><span class=\"line\">\t\t\t\ttargetNode = nil</span><br><span class=\"line\">\t\t\t&#125; else if targetNode.leftChild == nil &#123;</span><br><span class=\"line\">\t\t\t\ttree.root = tree.root.rightChild</span><br><span class=\"line\">\t\t\t\ttree.root.parent = nil</span><br><span class=\"line\">\t\t\t&#125; else if targetNode.rightChild == nil &#123;</span><br><span class=\"line\">\t\t\t\ttree.root = tree.root.leftChild</span><br><span class=\"line\">\t\t\t\ttree.root.parent = nil</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\ttargetNode.deleteSelfNode()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn true</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (tree *BstTree) SearchNode(d int) *Node &#123;</span><br><span class=\"line\">\tif tree.root == nil &#123;</span><br><span class=\"line\">\t\treturn nil;</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\treturn tree.root.FindNode(d)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (tree *BstTree) PreOrderTraversal() &#123;</span><br><span class=\"line\">\tif !tree.IsEmpty() &#123;</span><br><span class=\"line\">\t\ttree.root.traversalByPreOrder()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (tree *BstTree) InOrderTraversal() &#123;</span><br><span class=\"line\">\tif !tree.IsEmpty() &#123;</span><br><span class=\"line\">\t\ttree.root.traversalByInOrder()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">func (tree *BstTree) PostOrderTraversal() &#123;</span><br><span class=\"line\">\tif !tree.IsEmpty() &#123;</span><br><span class=\"line\">\t\ttree.root.traversalByPostOrder()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>main.go<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">\tvar tree = NewBstTree()</span><br><span class=\"line\">\tvar intArr = [9]int&#123;6, 5, 8, 4, 7, 9, 2, 1, 3&#125;</span><br><span class=\"line\">\tfor _, v := range intArr &#123;</span><br><span class=\"line\">\t\ttree.InsertNode(v)</span><br><span class=\"line\">\t\tfmt.Printf(&quot;Insert value %d into tree\\n&quot;, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttree.PreOrderTraversal()</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Printf(&quot;After delete %d from the tree\\n&quot;, 5)</span><br><span class=\"line\">\ttree.DeleteNode(5);</span><br><span class=\"line\">\ttree.PreOrderTraversal()</span><br><span class=\"line\">\tfmt.Printf(&quot;After delete %d from the tree\\n&quot;, 7)</span><br><span class=\"line\">\ttree.DeleteNode(7);</span><br><span class=\"line\">\ttree.PreOrderTraversal()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"输出\">输出<a href=\"post/GO实现BST二叉搜索树#输出\"></a></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Insert value 6 into tree</span><br><span class=\"line\">Insert value 5 into tree</span><br><span class=\"line\">Insert value 8 into tree</span><br><span class=\"line\">Insert value 4 into tree</span><br><span class=\"line\">Insert value 7 into tree</span><br><span class=\"line\">Insert value 9 into tree</span><br><span class=\"line\">Insert value 2 into tree</span><br><span class=\"line\">Insert value 1 into tree</span><br><span class=\"line\">Insert value 3 into tree</span><br><span class=\"line\">6  </span><br><span class=\"line\">5  </span><br><span class=\"line\">4  </span><br><span class=\"line\">2  </span><br><span class=\"line\">1  </span><br><span class=\"line\">3  </span><br><span class=\"line\">8  </span><br><span class=\"line\">7  </span><br><span class=\"line\">9  </span><br><span class=\"line\">After delete 5 from the tree</span><br><span class=\"line\">98504A:BSTTree yanshiwei$ ./BSTTree </span><br><span class=\"line\">Insert value 6 into tree</span><br><span class=\"line\">Insert value 5 into tree</span><br><span class=\"line\">Insert value 8 into tree</span><br><span class=\"line\">Insert value 4 into tree</span><br><span class=\"line\">Insert value 7 into tree</span><br><span class=\"line\">Insert value 9 into tree</span><br><span class=\"line\">Insert value 2 into tree</span><br><span class=\"line\">Insert value 1 into tree</span><br><span class=\"line\">Insert value 3 into tree</span><br><span class=\"line\">6  </span><br><span class=\"line\">5  </span><br><span class=\"line\">4  </span><br><span class=\"line\">2  </span><br><span class=\"line\">1  </span><br><span class=\"line\">3  </span><br><span class=\"line\">8  </span><br><span class=\"line\">7  </span><br><span class=\"line\">9  </span><br><span class=\"line\">After delete 5 from the tree</span><br><span class=\"line\">6  </span><br><span class=\"line\">4  </span><br><span class=\"line\">2  </span><br><span class=\"line\">1  </span><br><span class=\"line\">3  </span><br><span class=\"line\">8  </span><br><span class=\"line\">7  </span><br><span class=\"line\">9  </span><br><span class=\"line\">After delete 7 from the tree</span><br><span class=\"line\">6  </span><br><span class=\"line\">4  </span><br><span class=\"line\">2  </span><br><span class=\"line\">1  </span><br><span class=\"line\">3  </span><br><span class=\"line\">8  </span><br><span class=\"line\">9</span><br></pre></td></tr></table></figure>","next":{"title":"C++11之future,promise,packaged_task,async详解","slug":"C-11之future-promise-packaged-task-async详解"},"link":"http://yoursite.com/post/GO实现BST二叉搜索树/"}